{"ast":null,"code":"import { push } from \"connected-react-router\";\nexport var ADD_LIKE = \"ADD_LIKE\";\nexport var ADD_LIKE_SUCCESS = \"ADD_LIKE_SUCCESS\";\nexport var CREATE_MESSAGE = \"CREATE_MESSAGE\";\nexport var CREATE_MESSAGE_SUCCESS = \"CREATE_MESSAGE_SUCCESS\";\nexport var DELETE_USER = \"DELETE_USER\";\nexport var DELETE_USER_SUCCESS = \"DELETE_USER_SUCCESS\";\nexport var DELETE_USER_FAILURE = \"DELETE_USER_FAILURE\";\nexport var GET_ANY_USER = \"GET_ANY_USER\";\nexport var GET_ANY_USER_SUCCESS = \"GET_ANY_USER_SUCCESS\";\nexport var GET_ANY_USER_FAILURE = \"GET_ANY_USER_FAILURE\";\nexport var GET_MESSAGE_BY_ID = \"GET_MESSAGE_BY_ID\";\nexport var GET_MESSAGE_BY_ID_SUCCESS = \"GET_MESSAGE_BY_ID_SUCCESS\";\nexport var GET_MESSAGES = \"GET_MESSAGES\";\nexport var GET_MESSAGES_SUCCESS = \"GET_MESSAGES_SUCCESS\";\nexport var GET_MESSAGES_FAILURE = \"GET_MESSAGES_FAILURE\";\nexport var GET_USER = \"GET_USER\";\nexport var GET_USER_SUCCESS = \"GET_USER_SUCCESS\";\nexport var GET_USER_FAILURE = \"GET_USER_FAILURE\";\nexport var LIKE_MESSAGE = \"LIKE_MESSAGE\";\nexport var LOGOUT = \"LOGOUT\";\nexport var LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport var LOGOUT_FAILURE = \"LOGOUT_FAILURE\";\nexport var LOGIN = \"LOGIN\";\nexport var LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport var LOGIN_FAILURE = \"LOGIN_FAILURE\";\nexport var REGISTER = \"REGISTER\";\nexport var REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport var REGISTER_FAILURE = \"REGISTER_FAILURE\";\nexport var REMOVE_LIKE = \"REMOVE_LIKE\";\nexport var REMOVE_LIKE_SUCCESS = \"REMOVE_LIKE_SUCCESS\";\nexport var UPDATE_MESSAGE_BY_ID_SUCCESS = \"UPDATE_MESSAGE_BY_ID_SUCCESS\";\nexport var UPDATE_MESSAGE_BY_ID_FAIL = \"UPDATE_MESSAGE_BY_ID_FAIL\";\nexport var UPDATE_USER = \"UPDATE_USER\";\nexport var UPDATE_USER_SUCCESS = \"UPDATE_USER_SUCCESS\";\nexport var UPDATE_USER_FAILURE = \"UPDATE_USER_FAILURE\";\nexport var UPLOAD_USER_IMAGE = \"UPLOAD_USER_IMAGE\";\nexport var UPLOAD_USER_IMAGE_SUCCESS = \"UPLOAD_USER_IMAGE_SUCCESS\";\nexport var UPLOAD_USER_IMAGE_FAIL = \"UPLOAD_USER_IMAGE_FAIL\";\nexport var DOWNLOAD_USER_IMAGE = \"DOWNLOAD_USER_IMAGE\";\nexport var DOWNLOAD_USER_IMAGE_SUCCESS = \"DOWNLOAD_USER_IMAGE_SUCCESS\";\nexport var DOWNLOAD_USER_IMAGE_FAIL = \"DOWNLOAD_USER_IMAGE_FAIL\";\nvar kwitterURL = \"https://kwitter-api.herokuapp.com\";\nexport var login = function login(loginData) {\n  return function (dispatch) {\n    console.log(loginData);\n    dispatch({\n      type: LOGIN\n    });\n    fetch(\"\".concat(kwitterURL, \"/auth/login\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(loginData)\n    }).then(function (response) {\n      if (!response.ok) {\n        response.json().then(function (err) {\n          throw err;\n        });\n      }\n\n      return response.json();\n    }).then(function (data) {\n      if (data.success === false) {\n        throw \"\";\n      }\n\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: {\n          token: data.token,\n          id: data.id\n        },\n        login: data,\n        result: \"Successful login!\"\n      });\n      dispatch(push(\"/profile\"));\n      dispatch(getUserInfo(data.id));\n    }).catch(function (err) {\n      dispatch({\n        type: LOGIN_FAILURE,\n        result: \"Failed to login. Please enter a valid username and/or password.\"\n      });\n    });\n  };\n};\nexport var getUserInfo = function getUserInfo(userId) {\n  return function (dispatch) {\n    dispatch({\n      type: GET_USER\n    });\n    fetch(\"\".concat(kwitterURL, \"/users/\").concat(userId)).then(function (response) {\n      if (!response.ok) {\n        response.json().then(function (err) {\n          throw err;\n        });\n      }\n\n      return response.json();\n    }).then(function (data) {\n      dispatch({\n        type: GET_USER_SUCCESS,\n        data: data.user\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: GET_USER_FAILURE,\n        err: err\n      });\n    });\n  };\n};\nexport var register = function register(registerData, history) {\n  return function (dispatch) {\n    dispatch({\n      type: REGISTER\n    });\n    fetch(\"\".concat(kwitterURL, \"/auth/register\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(registerData)\n    }) // hydrates body; always need for api b/c always returns json; if not, it would  be parsed diff\n    // .then(response => response.json()) // if immediately hydrate, it always assumes its correct, so ave to check\n    .then(function (response) {\n      // response.ok means it's in the 200 range;\n      if (!response.ok) {\n        // throw from here, it goes to catch\n        response.json().then(function (err) {\n          throw err;\n        });\n      }\n\n      return response.json();\n    }).then(function (data) {\n      // data looks like w/e we got for resposne in api/psotman\n      // success already has values in state\n      // no setstate cause not in comp\n      // do dispatch on success\n      dispatch({\n        type: REGISTER_SUCCESS,\n        register: data,\n        result: \"Successfully Registered!\"\n      });\n      dispatch(push(\"/profile\"));\n      dispatch(login({\n        username: registerData.username,\n        password: registerData.password\n      }));\n    }).catch(function (err) {\n      // dispatch here on fail\n      dispatch({\n        type: REGISTER_FAILURE,\n        result: \"Failed to register. Please enter a unique username, and make sure all fields have 3-20 characters.\"\n      });\n    });\n  };\n};\nexport var logout = function logout() {\n  return function (dispatch) {\n    fetch(\"\".concat(kwitterURL, \"/auth/logout\")).then(function (response) {\n      if (!response.ok) {\n        response.json().then(function (err) {\n          throw err;\n        });\n      }\n\n      return response.json();\n    }).then(function (data) {\n      dispatch({\n        type: LOGOUT_SUCCESS\n      });\n      dispatch(push(\"/\"));\n    }).catch(function (err) {\n      dispatch({\n        type: LOGOUT_FAILURE,\n        err: err\n      });\n    });\n  };\n};\nexport var deleteUser = function deleteUser(token) {\n  return function (dispatch) {\n    dispatch({\n      type: DELETE_USER\n    });\n    fetch(\"\".concat(kwitterURL, \"/users\"), {\n      method: \"DELETE\",\n      headers: {\n        Authorization: \"Bearer \".concat(token)\n      }\n    }).then(function (response) {\n      if (!response.ok) {\n        response.json().then(function (err) {\n          throw err;\n        });\n      }\n\n      return response.json();\n    }).then(function (data) {\n      console.log(data);\n      dispatch({\n        type: DELETE_USER_SUCCESS\n      });\n      dispatch(push(\"/register\"));\n    }).catch(function (err) {\n      dispatch({\n        type: DELETE_USER_FAILURE,\n        err: err\n      });\n    });\n  };\n};\nexport var updateUser = function updateUser(userData) {\n  return function (dispatch, getState) {\n    var token = getState().authentication.token;\n\n    if (userData.displayName === \"\") {\n      delete userData.displayName;\n    }\n\n    if (userData.password === \"\") {\n      delete userData.password;\n    }\n\n    dispatch({\n      type: UPDATE_USER\n    });\n    fetch(\"\".concat(kwitterURL, \"/users\"), {\n      method: \"PATCH\",\n      headers: {\n        Authorization: \"Bearer \".concat(token),\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userData)\n    }).then(function (response) {\n      if (!response.ok) {\n        response.json().then(function (err) {\n          throw err;\n        });\n      }\n\n      return response.json();\n    }).then(function (data) {\n      dispatch({\n        type: UPDATE_USER_SUCCESS,\n        data: data.user\n      });\n      dispatch(push(\"/profile\"));\n    }).catch(function (err) {\n      dispatch({\n        type: UPDATE_USER_FAILURE,\n        err: err\n      });\n    });\n  };\n};\nexport var getAnyUser = function getAnyUser(userId) {\n  return function (dispatch) {\n    dispatch({\n      type: GET_ANY_USER\n    });\n    fetch(\"\".concat(kwitterURL, \"/users/\").concat(userId)).then(function (response) {\n      if (!response.ok) {\n        response.json().then(function (err) {\n          throw err;\n        });\n      }\n\n      return response.json();\n    }).then(function (data) {\n      dispatch({\n        type: GET_ANY_USER_SUCCESS,\n        data: data.user\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: GET_ANY_USER_FAILURE,\n        err: err\n      });\n    });\n  };\n};\nexport var getMessageById = function getMessageById(messageId) {\n  return function (dispatch) {\n    dispatch({\n      type: GET_MESSAGE_BY_ID\n    });\n    return fetch(\"\".concat(kwitterURL, \"/messages/\").concat(messageId)).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      dispatch({\n        type: GET_MESSAGE_BY_ID_SUCCESS\n      });\n      return data.message;\n    });\n  };\n};\nexport var updateMessageById = function updateMessageById(messageId) {\n  return function (dispatch, getState) {\n    dispatch(getMessageById(messageId)).then(function (message) {\n      var messages = getState().messages;\n      var messageIndex = messages.findIndex(function (message) {\n        return message.id === messageId;\n      });\n\n      if (messageIndex !== -1) {\n        dispatch({\n          type: UPDATE_MESSAGE_BY_ID_SUCCESS,\n          id: messageId,\n          index: messageIndex,\n          message: message\n        });\n      } else {\n        dispatch({\n          type: UPDATE_MESSAGE_BY_ID_FAIL,\n          id: messageId\n        });\n      }\n    });\n  };\n};\nexport var composeMessage = function composeMessage(text) {\n  return function (dispatch, getState) {\n    var token = getState().authentication.token;\n    dispatch({\n      type: CREATE_MESSAGE\n    });\n    return fetch(\"\".concat(kwitterURL, \"/messages\"), {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        text: text\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      dispatch({\n        type: CREATE_MESSAGE_SUCCESS\n      });\n      var userId = getState().authentication.id;\n      dispatch(getUserInfo(userId));\n    });\n  };\n};\nexport var removeLike = function removeLike(likeId) {\n  return function (dispatch, getState) {\n    var token = getState().authentication.token;\n    dispatch({\n      type: REMOVE_LIKE\n    });\n    return fetch(\"\".concat(kwitterURL, \"/likes/\").concat(likeId), {\n      method: \"DELETE\",\n      headers: {\n        Authorization: \"Bearer \" + token\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      dispatch({\n        type: REMOVE_LIKE_SUCCESS\n      });\n    });\n  };\n};\nexport var addLike = function addLike(messageId) {\n  return function (dispatch, getState) {\n    var token = getState().authentication.token;\n    dispatch({\n      type: ADD_LIKE\n    });\n    return fetch(\"\".concat(kwitterURL, \"/likes\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token\n      },\n      body: JSON.stringify({\n        messageId: messageId\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      dispatch({\n        type: ADD_LIKE_SUCCESS\n      });\n    });\n  };\n};\nexport var toggleLike = function toggleLike(messageId) {\n  return function (dispatch, getState) {\n    var message = getState().messages.find(function (message) {\n      return message.id === messageId;\n    });\n    var userId = getState().loggedInUser.id;\n    var like = message.likes.find(function (like) {\n      return like.userId === userId;\n    });\n\n    if (like) {\n      dispatch(removeLike(like.id)).then(function () {\n        dispatch(updateMessageById(messageId));\n      });\n    } else {\n      dispatch(addLike(messageId)).then(function () {\n        dispatch(updateMessageById(messageId));\n      });\n    }\n  };\n};\nexport var likedMessageSuccess = function likedMessageSuccess(likeObj) {\n  return {\n    type: LIKE_MESSAGE,\n    payload: likeObj\n  };\n};\nexport var likeMessage = function likeMessage(userId, messageId, token) {\n  return function (dispatch) {\n    var header = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer ${token}\"\n      },\n      body: JSON.stringify({\n        userId: userId,\n        messageId: messageId\n      })\n    };\n    return fetch(\"\".concat(kwitterURL, \"/messages\"), header).then(function (response) {\n      return response.json();\n    }).then(function (likeObj) {\n      dispatch(likedMessageSuccess(likeObj));\n      return likeObj.like.id;\n    });\n  };\n};\nexport function getMessages() {\n  return function (dispatch, getState) {\n    dispatch({\n      type: GET_MESSAGES\n    });\n    fetch(\"\".concat(kwitterURL, \"/messages\")).then(function (res) {\n      if (res.statusText === \"OK\") {\n        return res.json();\n      }\n    }).then(function (data) {\n      dispatch({\n        type: GET_MESSAGES_SUCCESS,\n        payload: {\n          messages: data.messages\n        }\n      });\n      data.messages.forEach(function (message) {\n        if (getState().users[message.userId]) {\n          return null;\n        } else {\n          dispatch(getAnyUser(message.userId));\n        }\n      });\n      setTimeout(function () {\n        return dispatch(getMessages());\n      }, 5000);\n    }).catch(function (err) {\n      console.log(err);\n      dispatch({\n        type: GET_MESSAGES_FAILURE\n      });\n    });\n  };\n}\nexport var uploadUserImage = function uploadUserImage(formData) {\n  return function (dispatch, getState) {\n    var token = getState().authentication.token;\n    var id = getState().authentication.id;\n    console.log(formData);\n    dispatch({\n      type: UPLOAD_USER_IMAGE\n    });\n    fetch(\"\".concat(kwitterURL, \"/users/picture\"), {\n      method: \"PUT\",\n      headers: {\n        Authorization: \"Bearer \".concat(token)\n      },\n      body: formData\n    }).then(function (res) {\n      console.log(res);\n\n      if (res.ok) {\n        dispatch({\n          type: UPLOAD_USER_IMAGE_SUCCESS,\n          userImageTimestamp: Date.now()\n        });\n        dispatch(downloadUserImage());\n        return;\n      }\n\n      return dispatch({\n        type: UPLOAD_USER_IMAGE_FAIL\n      });\n    });\n  };\n};\nexport var downloadUserImage = function downloadUserImage() {\n  return function (dispatch, getState) {\n    var loggedInUserId = getState().auth.login.id;\n    dispatch({\n      type: DOWNLOAD_USER_IMAGE\n    });\n    return fetch(\"\".concat(kwitterURL, \"/\").concat(loggedInUserId, \"/picture\")).then(function (res) {\n      if (res.ok) {\n        return res.blob().then(function (result) {\n          return window.URL.createObjectURL(result);\n        });\n      }\n\n      return \"https://react.semantic-ui.com/images/avatar/large/rachel.png\";\n    }).then(function (result) {\n      dispatch({\n        type: DOWNLOAD_USER_IMAGE_SUCCESS,\n        userImage: result\n      });\n    }).catch(function (err) {\n      console.error(err);\n      dispatch({\n        type: DOWNLOAD_USER_IMAGE_FAIL\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/Sdeg/Desktop/workspace/assessment---kwitter-frontend/src/Actions/actions.js"],"names":["push","ADD_LIKE","ADD_LIKE_SUCCESS","CREATE_MESSAGE","CREATE_MESSAGE_SUCCESS","DELETE_USER","DELETE_USER_SUCCESS","DELETE_USER_FAILURE","GET_ANY_USER","GET_ANY_USER_SUCCESS","GET_ANY_USER_FAILURE","GET_MESSAGE_BY_ID","GET_MESSAGE_BY_ID_SUCCESS","GET_MESSAGES","GET_MESSAGES_SUCCESS","GET_MESSAGES_FAILURE","GET_USER","GET_USER_SUCCESS","GET_USER_FAILURE","LIKE_MESSAGE","LOGOUT","LOGOUT_SUCCESS","LOGOUT_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","REMOVE_LIKE","REMOVE_LIKE_SUCCESS","UPDATE_MESSAGE_BY_ID_SUCCESS","UPDATE_MESSAGE_BY_ID_FAIL","UPDATE_USER","UPDATE_USER_SUCCESS","UPDATE_USER_FAILURE","UPLOAD_USER_IMAGE","UPLOAD_USER_IMAGE_SUCCESS","UPLOAD_USER_IMAGE_FAIL","DOWNLOAD_USER_IMAGE","DOWNLOAD_USER_IMAGE_SUCCESS","DOWNLOAD_USER_IMAGE_FAIL","kwitterURL","login","loginData","dispatch","console","log","type","fetch","method","headers","body","JSON","stringify","then","response","ok","json","err","data","success","payload","token","id","result","getUserInfo","catch","userId","user","register","registerData","history","username","password","logout","deleteUser","Authorization","updateUser","userData","getState","authentication","displayName","getAnyUser","getMessageById","messageId","res","message","updateMessageById","messages","messageIndex","findIndex","index","composeMessage","text","removeLike","likeId","addLike","toggleLike","find","loggedInUser","like","likes","likedMessageSuccess","likeObj","likeMessage","header","getMessages","statusText","forEach","users","setTimeout","uploadUserImage","formData","userImageTimestamp","Date","now","downloadUserImage","loggedInUserId","auth","blob","window","URL","createObjectURL","userImage","error"],"mappings":"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","sourcesContent":["import { push } from \"connected-react-router\";\nexport const ADD_LIKE = \"ADD_LIKE\";\nexport const ADD_LIKE_SUCCESS = \"ADD_LIKE_SUCCESS\";\nexport const CREATE_MESSAGE = \"CREATE_MESSAGE\";\nexport const CREATE_MESSAGE_SUCCESS = \"CREATE_MESSAGE_SUCCESS\";\nexport const DELETE_USER = \"DELETE_USER\";\nexport const DELETE_USER_SUCCESS = \"DELETE_USER_SUCCESS\";\nexport const DELETE_USER_FAILURE = \"DELETE_USER_FAILURE\";\nexport const GET_ANY_USER = \"GET_ANY_USER\";\nexport const GET_ANY_USER_SUCCESS = \"GET_ANY_USER_SUCCESS\";\nexport const GET_ANY_USER_FAILURE = \"GET_ANY_USER_FAILURE\";\nexport const GET_MESSAGE_BY_ID = \"GET_MESSAGE_BY_ID\";\nexport const GET_MESSAGE_BY_ID_SUCCESS = \"GET_MESSAGE_BY_ID_SUCCESS\";\nexport const GET_MESSAGES = \"GET_MESSAGES\";\nexport const GET_MESSAGES_SUCCESS = \"GET_MESSAGES_SUCCESS\";\nexport const GET_MESSAGES_FAILURE = \"GET_MESSAGES_FAILURE\";\nexport const GET_USER = \"GET_USER\";\nexport const GET_USER_SUCCESS = \"GET_USER_SUCCESS\";\nexport const GET_USER_FAILURE = \"GET_USER_FAILURE\";\nexport const LIKE_MESSAGE = \"LIKE_MESSAGE\";\nexport const LOGOUT = \"LOGOUT\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const LOGOUT_FAILURE = \"LOGOUT_FAILURE\";\nexport const LOGIN = \"LOGIN\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\nexport const REGISTER = \"REGISTER\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAILURE = \"REGISTER_FAILURE\";\nexport const REMOVE_LIKE = \"REMOVE_LIKE\";\nexport const REMOVE_LIKE_SUCCESS = \"REMOVE_LIKE_SUCCESS\";\nexport const UPDATE_MESSAGE_BY_ID_SUCCESS = \"UPDATE_MESSAGE_BY_ID_SUCCESS\";\nexport const UPDATE_MESSAGE_BY_ID_FAIL = \"UPDATE_MESSAGE_BY_ID_FAIL\";\nexport const UPDATE_USER = \"UPDATE_USER\";\nexport const UPDATE_USER_SUCCESS = \"UPDATE_USER_SUCCESS\";\nexport const UPDATE_USER_FAILURE = \"UPDATE_USER_FAILURE\";\n\n\nexport const UPLOAD_USER_IMAGE = \"UPLOAD_USER_IMAGE\";\nexport const UPLOAD_USER_IMAGE_SUCCESS = \"UPLOAD_USER_IMAGE_SUCCESS\";\nexport const UPLOAD_USER_IMAGE_FAIL = \"UPLOAD_USER_IMAGE_FAIL\";\n\nexport const DOWNLOAD_USER_IMAGE = \"DOWNLOAD_USER_IMAGE\";\nexport const DOWNLOAD_USER_IMAGE_SUCCESS = \"DOWNLOAD_USER_IMAGE_SUCCESS\";\nexport const DOWNLOAD_USER_IMAGE_FAIL = \"DOWNLOAD_USER_IMAGE_FAIL\";\n\n\n\n\nconst kwitterURL = \"https://kwitter-api.herokuapp.com\";\n\nexport const login = loginData => dispatch => {\n  console.log(loginData)\n  dispatch({ type: LOGIN });\n  fetch(`${kwitterURL}/auth/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(loginData)\n  })\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      if (data.success === false) {\n        throw \"\";\n      }\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: {\n          token: data.token,\n          id: data.id\n        },\n        login: data,\n        result: \"Successful login!\"\n      });\n      dispatch(push(\"/profile\"));\n      dispatch(getUserInfo(data.id));\n    })\n    .catch(err => {\n      dispatch({\n        type: LOGIN_FAILURE,\n        result:\n          \"Failed to login. Please enter a valid username and/or password.\"\n      });\n    });\n};\n\nexport const getUserInfo = userId => dispatch => {\n  dispatch({ type: GET_USER });\n  fetch(`${kwitterURL}/users/${userId}`)\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      dispatch({ type: GET_USER_SUCCESS, data: data.user });\n    })\n    .catch(err => {\n      dispatch({ type: GET_USER_FAILURE, err });\n    });\n};\n\nexport const register = (registerData, history) => dispatch => {\n  dispatch({\n    type: REGISTER\n  });\n  \n  fetch(`${kwitterURL}/auth/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(\n     \n      registerData\n    )\n  })\n    // hydrates body; always need for api b/c always returns json; if not, it would  be parsed diff\n    // .then(response => response.json()) // if immediately hydrate, it always assumes its correct, so ave to check\n    .then(response => {\n      // response.ok means it's in the 200 range;\n      if (!response.ok) {\n        // throw from here, it goes to catch\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json(); \n    })\n    .then(data => {\n      // data looks like w/e we got for resposne in api/psotman\n      // success already has values in state\n      // no setstate cause not in comp\n      // do dispatch on success\n      dispatch({\n        type: REGISTER_SUCCESS,\n        register: data,\n        result: \"Successfully Registered!\" \n      });\n      dispatch(push(\"/profile\"));\n      dispatch(\n        login({\n          username: registerData.username,\n          password: registerData.password\n        })\n      ); \n    })\n    .catch(err => {\n      // dispatch here on fail\n      dispatch({\n        type: REGISTER_FAILURE,\n        result: `Failed to register. Please enter a unique username, and make sure all fields have 3-20 characters.`\n      });\n    });\n};\n\nexport const logout = () => dispatch => {\n  fetch(`${kwitterURL}/auth/logout`)\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      dispatch({ type: LOGOUT_SUCCESS });\n      dispatch(push(\"/\"));\n    })\n    .catch(err => {\n      dispatch({ type: LOGOUT_FAILURE, err });\n    });\n};\n\nexport const deleteUser = token => dispatch => {\n  dispatch({ type: DELETE_USER });\n  fetch(`${kwitterURL}/users`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  })\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      console.log(data);\n      dispatch({ type: DELETE_USER_SUCCESS });\n      dispatch(push(\"/register\"));\n    })\n    .catch(err => {\n      dispatch({ type: DELETE_USER_FAILURE, err });\n    });\n};\n\nexport const updateUser = userData => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  if (userData.displayName === \"\") {\n    delete userData.displayName;\n  }\n  if (userData.password === \"\") {\n    delete userData.password;\n  }\n  dispatch({ type: UPDATE_USER });\n  fetch(`${kwitterURL}/users`, {\n    method: \"PATCH\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(userData)\n  })\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      dispatch({ type: UPDATE_USER_SUCCESS, data: data.user });\n      dispatch(push(\"/profile\"));\n    })\n    .catch(err => {\n      dispatch({ type: UPDATE_USER_FAILURE, err });\n    });\n};\n\nexport const getAnyUser = userId => dispatch => {\n  dispatch({ type: GET_ANY_USER });\n  fetch(`${kwitterURL}/users/${userId}`)\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      dispatch({ type: GET_ANY_USER_SUCCESS, data: data.user });\n    })\n    .catch(err => {\n      dispatch({ type: GET_ANY_USER_FAILURE, err });\n    });\n};\n\nexport const getMessageById = messageId => dispatch => {\n  dispatch({ type: GET_MESSAGE_BY_ID });\n  return fetch(`${kwitterURL}/messages/${messageId}`)\n    .then(res => res.json())\n    .then(data => {\n      dispatch({ type: GET_MESSAGE_BY_ID_SUCCESS });\n      return data.message;\n    });\n};\n\nexport const updateMessageById = messageId => (dispatch, getState) => {\n  dispatch(getMessageById(messageId)).then(message => {\n    const messages = getState().messages;\n    const messageIndex = messages.findIndex(\n      message => message.id === messageId\n    );\n    if (messageIndex !== -1) {\n      dispatch({\n        type: UPDATE_MESSAGE_BY_ID_SUCCESS,\n        id: messageId,\n        index: messageIndex,\n        message\n      });\n    } else {\n      dispatch({ type: UPDATE_MESSAGE_BY_ID_FAIL, id: messageId });\n    }\n  });\n};\n\nexport const composeMessage = text => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  dispatch({ type: CREATE_MESSAGE });\n  return fetch(`${kwitterURL}/messages`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ text })\n  })\n    .then(res => res.json())\n    .then(data => {\n      dispatch({\n        type: CREATE_MESSAGE_SUCCESS\n      });\n      const userId = getState().authentication.id;\n      dispatch(getUserInfo(userId));\n    });\n};\n\nexport const removeLike = likeId => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  dispatch({ type: REMOVE_LIKE });\n  return fetch(`${kwitterURL}/likes/${likeId}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: \"Bearer \" + token\n    }\n  })\n    .then(res => res.json())\n    .then(data => {\n      dispatch({\n        type: REMOVE_LIKE_SUCCESS\n      });\n    });\n};\nexport const addLike = messageId => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  dispatch({ type: ADD_LIKE });\n  return fetch(`${kwitterURL}/likes`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token\n    },\n    body: JSON.stringify({ messageId })\n  })\n    .then(res => res.json())\n    .then(data => {\n      dispatch({ type: ADD_LIKE_SUCCESS });\n    });\n};\nexport const toggleLike = messageId => (dispatch, getState) => {\n  const message = getState().messages.find(message => message.id === messageId);\n  const userId = getState().loggedInUser.id;\n\n  const like = message.likes.find(like => like.userId === userId);\n\n  if (like) {\n    dispatch(removeLike(like.id)).then(() => {\n      dispatch(updateMessageById(messageId));\n    });\n  } else {\n    dispatch(addLike(messageId)).then(() => {\n      dispatch(updateMessageById(messageId));\n    });\n  }\n};\nexport const likedMessageSuccess = likeObj => {\n  return {\n    type: LIKE_MESSAGE,\n    payload: likeObj\n  };\n};\nexport const likeMessage = (userId, messageId, token) => dispatch => {\n  const header = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer ${token}\"\n    },\n    body: JSON.stringify({\n      userId: userId,\n      messageId: messageId\n    })\n  };\n  return fetch(`${kwitterURL}/messages`, header)\n    .then(response => response.json())\n    .then(likeObj => {\n      dispatch(likedMessageSuccess(likeObj));\n      return likeObj.like.id;\n    });\n};\n\nexport function getMessages() {\n  return function(dispatch, getState) {\n    dispatch({ type: GET_MESSAGES });\n    fetch(`${kwitterURL}/messages`)\n      .then(res => {\n        if (res.statusText === \"OK\") {\n          return res.json(); \n        }\n      })\n      .then(data => {\n        dispatch({\n          type: GET_MESSAGES_SUCCESS,\n          payload: {\n            messages: data.messages\n          }\n        });\n        data.messages.forEach(message => {\n          if (getState().users[message.userId]) {\n            return null;\n          } else {\n            dispatch(getAnyUser(message.userId));\n          }\n        });\n        setTimeout(() => dispatch(getMessages()), 5000); \n      })\n      .catch(err => {\n        console.log(err);\n        dispatch({ type: GET_MESSAGES_FAILURE });\n      });\n  };\n}\n\n\nexport const uploadUserImage = formData => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  const id = getState().authentication.id\n  console.log(formData)\n  dispatch({\n    type: UPLOAD_USER_IMAGE\n  });\n\n  fetch(`${kwitterURL}/users/picture`, {\n    method: \"PUT\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    },\n    body: formData\n  }).then(res => {\n    console.log(res)\n    if (res.ok) {\n      dispatch({\n        type: UPLOAD_USER_IMAGE_SUCCESS,\n        userImageTimestamp: Date.now()\n      });\n      dispatch(downloadUserImage());\n      return;\n    }\n\n    return dispatch({\n      type: UPLOAD_USER_IMAGE_FAIL\n    });\n  });\n};\n\nexport const downloadUserImage = () => (dispatch, getState) => {\n  const loggedInUserId = getState().auth.login.id;\n  dispatch({ type: DOWNLOAD_USER_IMAGE });\n  return fetch(`${kwitterURL}/${loggedInUserId}/picture`)\n    .then(res => {\n      if (res.ok) {\n        return res.blob().then(result => window.URL.createObjectURL(result));\n      }\n      return \"https://react.semantic-ui.com/images/avatar/large/rachel.png\";\n    })\n    .then(result => {\n      dispatch({\n        type: DOWNLOAD_USER_IMAGE_SUCCESS,\n        userImage: result\n      });\n    })\n    .catch(err => {\n      console.error(err);\n      dispatch({\n        type: DOWNLOAD_USER_IMAGE_FAIL\n      });\n    });\n};\n"]},"metadata":{},"sourceType":"module"}
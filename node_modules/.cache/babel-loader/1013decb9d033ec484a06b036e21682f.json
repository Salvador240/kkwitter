{"ast":null,"code":"import _defineProperty from \"/Users/Sdeg/Desktop/workspace/assessment---kwitter-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/Sdeg/Desktop/workspace/assessment---kwitter-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { DELETE_USER, DELETE_USER_SUCCESS, DELETE_USER_FAILURE, GET_ANY_USER, GET_ANY_USER_SUCCESS, GET_ANY_USER_FAILURE, GET_MESSAGES, GET_MESSAGES_SUCCESS, GET_MESSAGES_FAILURE, GET_USER, GET_USER_SUCCESS, GET_USER_FAILURE, LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE, LOGOUT, LOGOUT_SUCCESS, LOGOUT_FAILURE, REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE, UPDATE_USER, UPDATE_USER_SUCCESS, UPDATE_USER_FAILURE, UPDATE_MESSAGE_BY_ID_SUCCESS, UPLOAD_USER_IMAGE, UPLOAD_USER_IMAGE_SUCCESS, UPLOAD_USER_IMAGE_FAIL, DOWNLOAD_USER_IMAGE, DOWNLOAD_USER_IMAGE_SUCCESS, DOWNLOAD_USER_IMAGE_FAIL } from \"../Actions/actions\";\nvar initialState = {\n  authentication: {\n    loginAuthSuccess: false,\n    token: null,\n    id: \"\"\n  },\n  loggedInUser: {\n    id: 0,\n    username: \"\",\n    displayName: \"\",\n    about: \"\",\n    createdAt: \"\",\n    updatedAt: \"\",\n    messages: []\n  },\n  login: {},\n  loginResult: \"\",\n  messages: [],\n  register: {},\n  registerResult: \"\",\n  userId: null,\n  users: {}\n};\n\nvar kwitterReducer = function kwitterReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case DELETE_USER:\n      return state;\n\n    case DELETE_USER_FAILURE:\n      return state;\n\n    case DELETE_USER_SUCCESS:\n      return _objectSpread({}, state, {\n        initialState: initialState\n      });\n\n    case GET_ANY_USER:\n      return state;\n\n    case GET_ANY_USER_SUCCESS:\n      return _objectSpread({}, state, {\n        users: _objectSpread({}, state.users, _defineProperty({}, action.data.id, action.data))\n      });\n\n    case GET_ANY_USER_FAILURE:\n      return state;\n\n    case GET_MESSAGES:\n      return state;\n\n    case GET_MESSAGES_FAILURE:\n      return state;\n\n    case GET_MESSAGES_SUCCESS:\n      return _objectSpread({}, state, {\n        messages: action.payload.messages\n      });\n\n    case GET_USER:\n      return state;\n\n    case GET_USER_SUCCESS:\n      return _objectSpread({}, state, {\n        loggedInUser: action.data\n      });\n\n    case GET_USER_FAILURE:\n      return state;\n\n    case LOGIN:\n      return state;\n\n    case LOGIN_FAILURE:\n      return _objectSpread({}, state, {\n        authentication: {\n          loginAuthSuccess: false\n        },\n        loginResult: action.result\n      });\n\n    case LOGIN_SUCCESS:\n      return _objectSpread({}, state, {\n        authentication: {\n          loginAuthSuccess: true,\n          token: action.payload.token,\n          id: action.payload.id\n        },\n        login: action.login,\n        loginResult: action.result\n      });\n\n    case LOGOUT:\n      return state;\n\n    case LOGOUT_SUCCESS:\n      return _objectSpread({}, state, {\n        loggedInUser: initialState.loggedInUser,\n        authentication: initialState.authentication\n      });\n\n    case LOGOUT_FAILURE:\n      return state;\n\n    case REGISTER:\n      return state;\n\n    case REGISTER_FAILURE:\n      return _objectSpread({}, state, {\n        registerResult: action.result\n      });\n\n    case REGISTER_SUCCESS:\n      return _objectSpread({}, state, {\n        register: action.register,\n        registerResult: action.result\n      });\n\n    case UPDATE_MESSAGE_BY_ID_SUCCESS:\n      var newMessages = state.messages.slice();\n      newMessages.splice(action.index, 1, action.message);\n      return _objectSpread({}, state, {\n        messages: newMessages\n      });\n\n    case UPDATE_USER:\n      return state;\n\n    case UPDATE_USER_SUCCESS:\n      return _objectSpread({}, state, {\n        loggedInUser: _objectSpread({}, state.loggedInUser, action.data)\n      });\n\n    case UPDATE_USER_FAILURE:\n      return state;\n\n    default:\n      return state;\n  }\n};\n\nexport default kwitterReducer;","map":{"version":3,"sources":["/Users/Sdeg/Desktop/workspace/assessment---kwitter-frontend/src/Reducers/reducer.js"],"names":["DELETE_USER","DELETE_USER_SUCCESS","DELETE_USER_FAILURE","GET_ANY_USER","GET_ANY_USER_SUCCESS","GET_ANY_USER_FAILURE","GET_MESSAGES","GET_MESSAGES_SUCCESS","GET_MESSAGES_FAILURE","GET_USER","GET_USER_SUCCESS","GET_USER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","LOGOUT_SUCCESS","LOGOUT_FAILURE","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","UPDATE_USER","UPDATE_USER_SUCCESS","UPDATE_USER_FAILURE","UPDATE_MESSAGE_BY_ID_SUCCESS","UPLOAD_USER_IMAGE","UPLOAD_USER_IMAGE_SUCCESS","UPLOAD_USER_IMAGE_FAIL","DOWNLOAD_USER_IMAGE","DOWNLOAD_USER_IMAGE_SUCCESS","DOWNLOAD_USER_IMAGE_FAIL","initialState","authentication","loginAuthSuccess","token","id","loggedInUser","username","displayName","about","createdAt","updatedAt","messages","login","loginResult","register","registerResult","userId","users","kwitterReducer","state","action","type","data","payload","result","newMessages","slice","splice","index","message"],"mappings":";;AAAA,SACEA,WADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,YAJF,EAKEC,oBALF,EAMEC,oBANF,EAOEC,YAPF,EAQEC,oBARF,EASEC,oBATF,EAUEC,QAVF,EAWEC,gBAXF,EAYEC,gBAZF,EAaEC,KAbF,EAcEC,aAdF,EAeEC,aAfF,EAgBEC,MAhBF,EAiBEC,cAjBF,EAkBEC,cAlBF,EAmBEC,QAnBF,EAoBEC,gBApBF,EAqBEC,gBArBF,EAsBEC,WAtBF,EAuBEC,mBAvBF,EAwBEC,mBAxBF,EAyBEC,4BAzBF,EA2BEC,iBA3BF,EA4BEC,yBA5BF,EA6BEC,sBA7BF,EA8BEC,mBA9BF,EA+BEC,2BA/BF,EAgCEC,wBAhCF,QAkCO,oBAlCP;AAoCA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,cAAc,EAAE;AACdC,IAAAA,gBAAgB,EAAE,KADJ;AAEdC,IAAAA,KAAK,EAAE,IAFO;AAGdC,IAAAA,EAAE,EAAE;AAHU,GADG;AAMnBC,EAAAA,YAAY,EAAE;AACZD,IAAAA,EAAE,EAAE,CADQ;AAEZE,IAAAA,QAAQ,EAAE,EAFE;AAGZC,IAAAA,WAAW,EAAE,EAHD;AAIZC,IAAAA,KAAK,EAAE,EAJK;AAKZC,IAAAA,SAAS,EAAE,EALC;AAMZC,IAAAA,SAAS,EAAE,EANC;AAOZC,IAAAA,QAAQ,EAAE;AAPE,GANK;AAgBnBC,EAAAA,KAAK,EAAE,EAhBY;AAiBnBC,EAAAA,WAAW,EAAE,EAjBM;AAkBnBF,EAAAA,QAAQ,EAAE,EAlBS;AAmBnBG,EAAAA,QAAQ,EAAE,EAnBS;AAoBnBC,EAAAA,cAAc,EAAE,EApBG;AAqBnBC,EAAAA,MAAM,EAAE,IArBW;AAsBnBC,EAAAA,KAAK,EAAE;AAtBY,CAArB;;AAyBA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBnB,YAAyB;AAAA,MAAXoB,MAAW;;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKpD,WAAL;AACE,aAAOkD,KAAP;;AACF,SAAKhD,mBAAL;AACE,aAAOgD,KAAP;;AACF,SAAKjD,mBAAL;AACE,+BACKiD,KADL;AAEEnB,QAAAA,YAAY,EAAZA;AAFF;;AAIF,SAAK5B,YAAL;AACE,aAAO+C,KAAP;;AACF,SAAK9C,oBAAL;AACE,+BACK8C,KADL;AAEEF,QAAAA,KAAK,oBAAOE,KAAK,CAACF,KAAb,sBAAqBG,MAAM,CAACE,IAAP,CAAYlB,EAAjC,EAAsCgB,MAAM,CAACE,IAA7C;AAFP;;AAIF,SAAKhD,oBAAL;AACE,aAAO6C,KAAP;;AACF,SAAK5C,YAAL;AACE,aAAO4C,KAAP;;AACF,SAAK1C,oBAAL;AACE,aAAO0C,KAAP;;AACF,SAAK3C,oBAAL;AACE,+BACK2C,KADL;AAEER,QAAAA,QAAQ,EAAES,MAAM,CAACG,OAAP,CAAeZ;AAF3B;;AAIF,SAAKjC,QAAL;AACE,aAAOyC,KAAP;;AACF,SAAKxC,gBAAL;AACE,+BACKwC,KADL;AAEEd,QAAAA,YAAY,EAAEe,MAAM,CAACE;AAFvB;;AAIF,SAAK1C,gBAAL;AACE,aAAOuC,KAAP;;AACF,SAAKtC,KAAL;AACE,aAAOsC,KAAP;;AACF,SAAKpC,aAAL;AACE,+BACKoC,KADL;AAEElB,QAAAA,cAAc,EAAE;AACdC,UAAAA,gBAAgB,EAAE;AADJ,SAFlB;AAKEW,QAAAA,WAAW,EAAEO,MAAM,CAACI;AALtB;;AAOF,SAAK1C,aAAL;AACE,+BACKqC,KADL;AAEElB,QAAAA,cAAc,EAAE;AACdC,UAAAA,gBAAgB,EAAE,IADJ;AAEdC,UAAAA,KAAK,EAAEiB,MAAM,CAACG,OAAP,CAAepB,KAFR;AAGdC,UAAAA,EAAE,EAAEgB,MAAM,CAACG,OAAP,CAAenB;AAHL,SAFlB;AAOEQ,QAAAA,KAAK,EAAEQ,MAAM,CAACR,KAPhB;AAQEC,QAAAA,WAAW,EAAEO,MAAM,CAACI;AARtB;;AAUF,SAAKxC,MAAL;AACE,aAAOmC,KAAP;;AACF,SAAKlC,cAAL;AACE,+BACKkC,KADL;AAEEd,QAAAA,YAAY,EAAEL,YAAY,CAACK,YAF7B;AAGEJ,QAAAA,cAAc,EAAED,YAAY,CAACC;AAH/B;;AAKF,SAAKf,cAAL;AACE,aAAOiC,KAAP;;AACF,SAAKhC,QAAL;AACE,aAAOgC,KAAP;;AACF,SAAK9B,gBAAL;AACE,+BACK8B,KADL;AAEEJ,QAAAA,cAAc,EAAEK,MAAM,CAACI;AAFzB;;AAIF,SAAKpC,gBAAL;AACE,+BACK+B,KADL;AAEEL,QAAAA,QAAQ,EAAEM,MAAM,CAACN,QAFnB;AAGEC,QAAAA,cAAc,EAAEK,MAAM,CAACI;AAHzB;;AAKF,SAAK/B,4BAAL;AACE,UAAMgC,WAAW,GAAGN,KAAK,CAACR,QAAN,CAAee,KAAf,EAApB;AACAD,MAAAA,WAAW,CAACE,MAAZ,CAAmBP,MAAM,CAACQ,KAA1B,EAAiC,CAAjC,EAAoCR,MAAM,CAACS,OAA3C;AACA,+BACKV,KADL;AAEER,QAAAA,QAAQ,EAAEc;AAFZ;;AAIF,SAAKnC,WAAL;AACE,aAAO6B,KAAP;;AACF,SAAK5B,mBAAL;AACE,+BACK4B,KADL;AAEEd,QAAAA,YAAY,oBAAOc,KAAK,CAACd,YAAb,EAA8Be,MAAM,CAACE,IAArC;AAFd;;AAIF,SAAK9B,mBAAL;AACE,aAAO2B,KAAP;;AAGF;AACE,aAAOA,KAAP;AApGJ;AAsGD,CAvGD;;AAyGA,eAAeD,cAAf","sourcesContent":["import {\n  DELETE_USER,\n  DELETE_USER_SUCCESS,\n  DELETE_USER_FAILURE,\n  GET_ANY_USER,\n  GET_ANY_USER_SUCCESS,\n  GET_ANY_USER_FAILURE,\n  GET_MESSAGES,\n  GET_MESSAGES_SUCCESS,\n  GET_MESSAGES_FAILURE,\n  GET_USER,\n  GET_USER_SUCCESS,\n  GET_USER_FAILURE,\n  LOGIN,\n  LOGIN_SUCCESS,\n  LOGIN_FAILURE,\n  LOGOUT,\n  LOGOUT_SUCCESS,\n  LOGOUT_FAILURE,\n  REGISTER,\n  REGISTER_SUCCESS,\n  REGISTER_FAILURE,\n  UPDATE_USER,\n  UPDATE_USER_SUCCESS,\n  UPDATE_USER_FAILURE,\n  UPDATE_MESSAGE_BY_ID_SUCCESS,\n\n  UPLOAD_USER_IMAGE,\n  UPLOAD_USER_IMAGE_SUCCESS,\n  UPLOAD_USER_IMAGE_FAIL,\n  DOWNLOAD_USER_IMAGE,\n  DOWNLOAD_USER_IMAGE_SUCCESS,\n  DOWNLOAD_USER_IMAGE_FAIL\n\n} from \"../Actions/actions\";\n\nconst initialState = {\n  authentication: {\n    loginAuthSuccess: false,\n    token: null,\n    id: \"\"\n  },\n  loggedInUser: {\n    id: 0,\n    username: \"\",\n    displayName: \"\",\n    about: \"\",\n    createdAt: \"\",\n    updatedAt: \"\",\n    messages: []\n  },\n \n  login: {},\n  loginResult: \"\",\n  messages: [],\n  register: {},\n  registerResult: \"\", \n  userId: null,\n  users: {}\n};\n\nconst kwitterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case DELETE_USER:\n      return state;\n    case DELETE_USER_FAILURE:\n      return state;\n    case DELETE_USER_SUCCESS:\n      return {\n        ...state,\n        initialState\n      };\n    case GET_ANY_USER:\n      return state;\n    case GET_ANY_USER_SUCCESS:\n      return {\n        ...state,\n        users: { ...state.users, [action.data.id]: action.data }\n      };\n    case GET_ANY_USER_FAILURE:\n      return state;\n    case GET_MESSAGES:\n      return state;\n    case GET_MESSAGES_FAILURE:\n      return state;\n    case GET_MESSAGES_SUCCESS:\n      return {\n        ...state,\n        messages: action.payload.messages\n      };\n    case GET_USER:\n      return state;\n    case GET_USER_SUCCESS:\n      return {\n        ...state,\n        loggedInUser: action.data\n      };\n    case GET_USER_FAILURE:\n      return state;\n    case LOGIN:\n      return state;\n    case LOGIN_FAILURE:\n      return {\n        ...state,\n        authentication: {\n          loginAuthSuccess: false\n        },\n        loginResult: action.result\n      };\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        authentication: {\n          loginAuthSuccess: true,\n          token: action.payload.token,\n          id: action.payload.id\n        },\n        login: action.login,\n        loginResult: action.result\n      };\n    case LOGOUT:\n      return state;\n    case LOGOUT_SUCCESS:\n      return {\n        ...state,\n        loggedInUser: initialState.loggedInUser,\n        authentication: initialState.authentication\n      };\n    case LOGOUT_FAILURE:\n      return state;\n    case REGISTER:\n      return state;  \n    case REGISTER_FAILURE:\n      return {\n        ...state,\n        registerResult: action.result\n      };\n    case REGISTER_SUCCESS:\n      return {\n        ...state,\n        register: action.register,\n        registerResult: action.result\n      };\n    case UPDATE_MESSAGE_BY_ID_SUCCESS:\n      const newMessages = state.messages.slice();\n      newMessages.splice(action.index, 1, action.message);\n      return {\n        ...state,\n        messages: newMessages\n      };\n    case UPDATE_USER:\n      return state;\n    case UPDATE_USER_SUCCESS:\n      return {\n        ...state,\n        loggedInUser: { ...state.loggedInUser, ...action.data }\n      };\n    case UPDATE_USER_FAILURE:\n      return state;\n\n      \n    default:\n      return state;\n  }\n};\n\nexport default kwitterReducer;\n"]},"metadata":{},"sourceType":"module"}
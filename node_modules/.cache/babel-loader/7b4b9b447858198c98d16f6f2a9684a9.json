{"ast":null,"code":"import { push } from \"connected-react-router\";\nexport var DELETE_USER = \"DELETE_USER\";\nexport var DELETE_USER_SUCCESS = \"DELETE_USER_SUCCESS\";\nexport var DELETE_USER_FAILURE = \"DELETE_USER_FAILURE\";\nexport var GET_USER = \"GET_USER\";\nexport var GET_USER_SUCCESS = \"GET_USER_SUCCESS\";\nexport var GET_USER_FAILURE = \"GET_USER_FAILURE\";\nexport var LOGOUT = \"LOGOUT\";\nexport var LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport var LOGOUT_FAILURE = \"LOGOUT_FAILURE\";\nexport var LOGIN = \"LOGIN\";\nexport var LOGIN_FAILURE = \"LOGIN_FAILURE\";\nexport var LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport var REGISTER = \"REGISTER\";\nexport var REGISTER_FAILURE = \"REGISTER_FAILURE\";\nexport var REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport var LIKE_MESSAGE = \"LIKE_MESSAGE\";\nexport var GET_MESSAGES = \"GET_MESSAGES\";\nexport var GET_MESSAGES_SUCCESS = \"GET_MESSAGES_SUCCESS\";\nexport var GET_MESSAGES_FAILURE = \"GET_MESSAGES_FAILURE\";\nexport var ADD_MESS = \"ADD_TEXT\";\nexport var UPDATE_USER = \"UPDATE_USER\";\nexport var UPDATE_USER_SUCCESS = \"UPDATE_USER_SUCCESS\";\nexport var UPDATE_USER_FAILURE = \"UPDATE_USER_FAILURE\";\nexport var REMOVE_LIKE = \"REMOVE_LIKE\";\nexport var REMOVE_LIKE_SUCCESS = \"REMOVE_LIKE_SUCCESS\";\nexport var ADD_LIKE = \"ADD_LIKE\";\nexport var ADD_LIKE_SUCCESS = \"ADD_LIKE_SUCCESS\";\nexport var UPDATE_MESSAGE_BY_ID_SUCCESS = \"UPDATE_MESSAGE_BY_ID_SUCCESS\";\nexport var UPDATE_MESSAGE_BY_ID_FAIL = \"UPDATE_MESSAGE_BY_ID_FAIL\";\nexport var GET_MESSAGE_BY_ID = \"GET_MESSAGE_BY_ID\";\nexport var GET_MESSAGE_BY_ID_SUCCESS = \"GET_MESSAGE_BY_ID_SUCCESS\";\nexport var CREATE_MESSAGE = \"CREATE_MESSAGE\";\nexport var CREATE_MESSAGE_SUCCESS = \"CREATE_MESSAGE_SUCCESS\";\nvar kwitterURL = \"https://kwitter-api.herokuapp.com\";\nexport var composeMessage = function composeMessage(text) {\n  return function (dispatch, getState) {\n    var token = getState().authentication.token;\n    dispatch({\n      type: CREATE_MESSAGE\n    });\n    return fetch(\"\".concat(kwitterURL, \"/messages\"), {\n      method: \"POST\",\n      headers: {\n        Authorization: \"Bearer \" + token,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        text: text\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      dispatch({\n        type: CREATE_MESSAGE_SUCCESS\n      });\n      var userId = getState().authentication.id;\n      dispatch(getUserInfo(userId));\n    });\n  };\n};\nexport var removeLike = function removeLike(likeId) {\n  return function (dispatch, getState) {\n    var token = getState().authentication.token;\n    dispatch({\n      type: REMOVE_LIKE\n    });\n    return fetch(\"\".concat(kwitterURL, \"/likes/\").concat(likeId), {\n      method: \"DELETE\",\n      headers: {\n        Authorization: \"Bearer \" + token\n      }\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      dispatch({\n        type: REMOVE_LIKE_SUCCESS\n      });\n    });\n  };\n};\nexport var addLike = function addLike(messageId) {\n  return function (dispatch, getState) {\n    var token = getState().authentication.token;\n    dispatch({\n      type: ADD_LIKE\n    });\n    return fetch(\"\".concat(kwitterURL, \"/likes\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token\n      },\n      body: JSON.stringify({\n        messageId: messageId\n      })\n    }).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      dispatch({\n        type: ADD_LIKE_SUCCESS\n      });\n    });\n  };\n};\nexport var getMessageById = function getMessageById(messageId) {\n  return function (dispatch) {\n    dispatch({\n      type: GET_MESSAGE_BY_ID\n    });\n    return fetch(\"\".concat(kwitterURL, \"/messages/\").concat(messageId)).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      dispatch({\n        type: GET_MESSAGE_BY_ID_SUCCESS\n      });\n      return data.message;\n    });\n  };\n};\nexport var updateMessageById = function updateMessageById(messageId) {\n  return function (dispatch, getState) {\n    dispatch(getMessageById(messageId)).then(function (message) {\n      var messages = getState().messages;\n      var messageIndex = messages.findIndex(function (message) {\n        return message.id === messageId;\n      });\n\n      if (~messageIndex) {\n        dispatch({\n          type: UPDATE_MESSAGE_BY_ID_SUCCESS,\n          id: messageId,\n          index: messageIndex,\n          message: message\n        });\n      } else {\n        dispatch({\n          type: UPDATE_MESSAGE_BY_ID_FAIL,\n          id: messageId\n        });\n      }\n    });\n  };\n};\nexport var toggleLike = function toggleLike(messageId) {\n  return function (dispatch, getState) {\n    var message = getState().messages.find(function (message) {\n      return message.id === messageId;\n    });\n    var userId = getState().loggedInUser.id;\n    var like = message.likes.find(function (like) {\n      return like.userId === userId;\n    });\n\n    if (like) {\n      dispatch(removeLike(like.id)).then(function () {\n        dispatch(updateMessageById(messageId));\n      });\n    } else {\n      dispatch(addLike(messageId)).then(function () {\n        dispatch(updateMessageById(messageId));\n      });\n    }\n  };\n};\nexport var likedMessageSuccess = function likedMessageSuccess(likeObj) {\n  return {\n    type: LIKE_MESSAGE,\n    payload: likeObj\n  };\n};\nexport var likeMessage = function likeMessage(userId, messageId, token) {\n  return function (dispatch) {\n    var header = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer ${token}\"\n      },\n      body: JSON.stringify({\n        userId: userId,\n        messageId: messageId\n      })\n    };\n    return fetch(\"${kwitterURL}/messages\", header).then(function (response) {\n      return response.json();\n    }).then(function (likeObj) {\n      dispatch(likedMessageSuccess(likeObj));\n      return likeObj.like.id;\n    });\n  };\n};\nexport var addMess = function addMess(_ref) {\n  var message = _ref.message,\n      token = _ref.token;\n  return function (dispatch) {\n    fetch(\"\".concat(kwitterURL, \"/messages\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        charset: \"utf-8\"\n      },\n      data: {\n        text: message\n      }\n    }).then(function () {\n      dispatch(getMessages());\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n};\nexport function getMessages() {\n  return function (dispatch) {\n    dispatch({\n      type: GET_MESSAGES\n    });\n    fetch(\"\".concat(kwitterURL, \"/messages\")).then(function (res) {\n      if (res.statusText === \"OK\") {\n        return res.json();\n      }\n    }).then(function (data) {\n      dispatch({\n        type: GET_MESSAGES_SUCCESS,\n        payload: {\n          messages: data.messages\n        }\n      });\n    }).catch(function (err) {\n      console.log(err);\n      dispatch({\n        type: GET_MESSAGES_FAILURE\n      });\n    });\n  };\n}\nexport var login = function login(loginData) {\n  return function (dispatch) {\n    dispatch({\n      type: LOGIN\n    });\n    fetch(\"\".concat(kwitterURL, \"/auth/login\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(loginData)\n    }).then(function (response) {\n      if (!response.ok) {\n        response.json().then(function (err) {\n          throw err;\n        });\n      }\n\n      return response.json();\n    }).then(function (data) {\n      if (data.success === false) {\n        throw \"\";\n      }\n\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: {\n          token: data.token,\n          id: data.id\n        },\n        login: data,\n        result: \"Successful login!\"\n      });\n      dispatch(push(\"/profile\"));\n      dispatch(getUserInfo(data.id));\n    }).catch(function (err) {\n      dispatch({\n        type: LOGIN_FAILURE,\n        result: \"Failed to login. Please enter a valid username and/or password.\"\n      });\n    });\n  };\n};\nexport var getUserInfo = function getUserInfo(userId) {\n  return function (dispatch) {\n    dispatch({\n      type: GET_USER\n    });\n    fetch(\"\".concat(kwitterURL, \"/users/\").concat(userId)).then(function (response) {\n      if (!response.ok) {\n        response.json().then(function (err) {\n          throw err;\n        });\n      }\n\n      return response.json();\n    }).then(function (data) {\n      dispatch({\n        type: GET_USER_SUCCESS,\n        data: data.user\n      });\n    }).catch(function (err) {\n      dispatch({\n        type: GET_USER_FAILURE,\n        err: err\n      });\n    });\n  };\n};\nexport var logout = function logout() {\n  return function (dispatch) {\n    fetch(\"\".concat(kwitterURL, \"/auth/logout\")).then(function (response) {\n      if (!response.ok) {\n        response.json().then(function (err) {\n          throw err;\n        });\n      }\n\n      return response.json();\n    }).then(function (data) {\n      dispatch({\n        type: LOGOUT_SUCCESS\n      });\n      dispatch(push(\"/\"));\n      alert(\"Thanks for visiting KWITTER! Come back soon!\");\n    }).catch(function (err) {\n      dispatch({\n        type: LOGOUT_FAILURE,\n        err: err\n      });\n    });\n  };\n};\njust;\nexport var register = function register(registerData, history) {\n  return function (dispatch) {\n    dispatch({\n      type: REGISTER\n    });\n    fetch(\"\".concat(kwitterURL, \"/auth/register\"), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(registerData)\n    }) // hydrates body; always need for api b/c always returns json; if not, it would  be parsed diff\n    // .then(response => response.json()) // if immediately hydrate, it always assumes its correct, so ave to check\n    .then(function (response) {\n      if (!response.ok) {\n        // throw from here, it goes to catch\n        response.json().then(function (err) {\n          throw err;\n        });\n      }\n\n      return response.json(); // this is an else basically\n    }).then(function (data) {\n      dispatch({\n        type: REGISTER_SUCCESS,\n        register: data,\n        result: \"Successfully Registered!\" // could make a <div>{this.props.result}</div> to display; reducer might use this value to put some  update\n\n      });\n      dispatch(push(\"/profile\"));\n      dispatch(login({\n        username: registerData.username,\n        password: registerData.password\n      })); //gets loginData w. un and p, so need it as an obj; haveing only the username and password is because thats what the rD needs\n    }).catch(function (err) {\n      // dispatch here on fail\n      dispatch({\n        type: REGISTER_FAILURE,\n        result: \"Failed to register. Please enter a unique username, and make sure all fields have 3-20 characters.\"\n      });\n    });\n  };\n};\nexport var deleteUser = function deleteUser(token) {\n  return function (dispatch) {\n    dispatch({\n      type: DELETE_USER\n    });\n    fetch(\"\".concat(kwitterURL, \"/users\"), {\n      method: \"DELETE\",\n      headers: {\n        Authorization: \"Bearer \".concat(token)\n      }\n    }).then(function (response) {\n      if (!response.ok) {\n        response.json().then(function (err) {\n          throw err;\n        });\n      }\n\n      return response.json();\n    }).then(function (data) {\n      console.log(data);\n      dispatch({\n        type: DELETE_USER_SUCCESS\n      });\n      dispatch(push(\"/register\")); //   window.confirm(\"Are you sure?\");\n    }).catch(function (err) {\n      dispatch({\n        type: DELETE_USER_FAILURE,\n        err: err\n      });\n    });\n  };\n};\nexport var updateUser = function updateUser(userData) {\n  return function (dispatch, getState) {\n    var token = getState().authentication.token;\n\n    if (userData.displayName === \"\") {\n      delete userData.displayName;\n    }\n\n    if (userData.password === \"\") {\n      delete userData.password;\n    }\n\n    dispatch({\n      type: UPDATE_USER\n    });\n    fetch(\"https://kwitter-api.herokuapp.com/users\", {\n      method: \"PATCH\",\n      headers: {\n        Authorization: \"Bearer \".concat(token),\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userData)\n    }).then(function (response) {\n      if (!response.ok) {\n        response.json().then(function (err) {\n          throw err;\n        });\n      }\n\n      return response.json();\n    }).then(function (data) {\n      dispatch({\n        type: UPDATE_USER_SUCCESS,\n        data: data.user\n      });\n      dispatch(push(\"/profile\"));\n    }).catch(function (err) {\n      dispatch({\n        type: UPDATE_USER_FAILURE,\n        err: err\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/Sdeg/Desktop/workspace/assessment---kwitter-frontend/src/actions/Message.js"],"names":["push","DELETE_USER","DELETE_USER_SUCCESS","DELETE_USER_FAILURE","GET_USER","GET_USER_SUCCESS","GET_USER_FAILURE","LOGOUT","LOGOUT_SUCCESS","LOGOUT_FAILURE","LOGIN","LOGIN_FAILURE","LOGIN_SUCCESS","REGISTER","REGISTER_FAILURE","REGISTER_SUCCESS","LIKE_MESSAGE","GET_MESSAGES","GET_MESSAGES_SUCCESS","GET_MESSAGES_FAILURE","ADD_MESS","UPDATE_USER","UPDATE_USER_SUCCESS","UPDATE_USER_FAILURE","REMOVE_LIKE","REMOVE_LIKE_SUCCESS","ADD_LIKE","ADD_LIKE_SUCCESS","UPDATE_MESSAGE_BY_ID_SUCCESS","UPDATE_MESSAGE_BY_ID_FAIL","GET_MESSAGE_BY_ID","GET_MESSAGE_BY_ID_SUCCESS","CREATE_MESSAGE","CREATE_MESSAGE_SUCCESS","kwitterURL","composeMessage","text","dispatch","getState","token","authentication","type","fetch","method","headers","Authorization","body","JSON","stringify","then","res","json","data","userId","id","getUserInfo","removeLike","likeId","addLike","messageId","getMessageById","message","updateMessageById","messages","messageIndex","findIndex","index","toggleLike","find","loggedInUser","like","likes","likedMessageSuccess","likeObj","payload","likeMessage","header","response","addMess","charset","getMessages","catch","err","console","log","statusText","login","loginData","ok","success","result","user","logout","alert","just","register","registerData","history","username","password","deleteUser","updateUser","userData","displayName"],"mappings":"AAAA,SAASA,IAAT,QAAqB,wBAArB;AACA,OAAO,IAAMC,WAAW,GAAG,aAApB;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,MAAM,GAAG,QAAf;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,KAAK,GAAG,OAAd;AACP,OAAO,IAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,IAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,IAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,YAAY,GAAG,cAArB;AACP,OAAO,IAAMC,YAAY,GAAG,cAArB;AACP,OAAO,IAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,IAAMC,oBAAoB,GAAG,sBAA7B;AACP,OAAO,IAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,IAAMC,WAAW,GAAG,aAApB;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,WAAW,GAAG,aAApB;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,QAAQ,GAAG,UAAjB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,4BAA4B,GAAG,8BAArC;AACP,OAAO,IAAMC,yBAAyB,GAAG,2BAAlC;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,yBAAyB,GAAG,2BAAlC;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,sBAAsB,GAAG,wBAA/B;AACP,IAAMC,UAAU,GAAG,mCAAnB;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,IAAI;AAAA,SAAI,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC5D,QAAMC,KAAK,GAAGD,QAAQ,GAAGE,cAAX,CAA0BD,KAAxC;AACAF,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAET;AAAR,KAAD,CAAR;AACA,WAAOU,KAAK,WAAIR,UAAJ,gBAA2B;AACrCS,MAAAA,MAAM,EAAE,MAD6B;AAErCC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,YAAYN,KADpB;AAEP,wBAAgB;AAFT,OAF4B;AAMrCO,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEZ,QAAAA,IAAI,EAAJA;AAAF,OAAf;AAN+B,KAA3B,CAAL,CAQJa,IARI,CAQC,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KARJ,EASJF,IATI,CASC,UAAAG,IAAI,EAAI;AACZf,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAER;AADC,OAAD,CAAR;AAGA,UAAMoB,MAAM,GAAGf,QAAQ,GAAGE,cAAX,CAA0Bc,EAAzC;AACAjB,MAAAA,QAAQ,CAACkB,WAAW,CAACF,MAAD,CAAZ,CAAR;AACD,KAfI,CAAP;AAgBD,GAnBiC;AAAA,CAA3B;AAqBP,OAAO,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAAAC,MAAM;AAAA,SAAI,UAACpB,QAAD,EAAWC,QAAX,EAAwB;AAC1D,QAAMC,KAAK,GAAGD,QAAQ,GAAGE,cAAX,CAA0BD,KAAxC;AACAF,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEjB;AAAR,KAAD,CAAR;AACA,WAAOkB,KAAK,WAAIR,UAAJ,oBAAwBuB,MAAxB,GAAkC;AAC5Cd,MAAAA,MAAM,EAAE,QADoC;AAE5CC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAE,YAAYN;AADpB;AAFmC,KAAlC,CAAL,CAMJU,IANI,CAMC,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KANJ,EAOJF,IAPI,CAOC,UAAAG,IAAI,EAAI;AACZf,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEhB;AADC,OAAD,CAAR;AAGD,KAXI,CAAP;AAYD,GAf+B;AAAA,CAAzB;AAiBP,OAAO,IAAMiC,OAAO,GAAG,SAAVA,OAAU,CAAAC,SAAS;AAAA,SAAI,UAACtB,QAAD,EAAWC,QAAX,EAAwB;AAC1D,QAAMC,KAAK,GAAGD,QAAQ,GAAGE,cAAX,CAA0BD,KAAxC;AACAF,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEf;AAAR,KAAD,CAAR;AACA,WAAOgB,KAAK,WAAIR,UAAJ,aAAwB;AAClCS,MAAAA,MAAM,EAAE,MAD0B;AAElCC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAE,YAAYN;AAFpB,OAFyB;AAMlCO,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEW,QAAAA,SAAS,EAATA;AAAF,OAAf;AAN4B,KAAxB,CAAL,CAQJV,IARI,CAQC,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KARJ,EASJF,IATI,CASC,UAAAG,IAAI,EAAI;AACZf,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEd;AAAR,OAAD,CAAR;AACD,KAXI,CAAP;AAYD,GAf+B;AAAA,CAAzB;AAgBP,OAAO,IAAMiC,cAAc,GAAG,SAAjBA,cAAiB,CAAAD,SAAS;AAAA,SAAI,UAAAtB,QAAQ,EAAI;AACrDA,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEX;AAAR,KAAD,CAAR;AACA,WAAOY,KAAK,WAAIR,UAAJ,uBAA2ByB,SAA3B,EAAL,CACJV,IADI,CACC,UAAAC,GAAG;AAAA,aAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,KADJ,EAEJF,IAFI,CAEC,UAAAG,IAAI,EAAI;AACZf,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEV;AAAR,OAAD,CAAR;AACA,aAAOqB,IAAI,CAACS,OAAZ;AACD,KALI,CAAP;AAMD,GARsC;AAAA,CAAhC;AASP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAH,SAAS;AAAA,SAAI,UAACtB,QAAD,EAAWC,QAAX,EAAwB;AACpED,IAAAA,QAAQ,CAACuB,cAAc,CAACD,SAAD,CAAf,CAAR,CAAoCV,IAApC,CAAyC,UAAAY,OAAO,EAAI;AAClD,UAAME,QAAQ,GAAGzB,QAAQ,GAAGyB,QAA5B;AACA,UAAMC,YAAY,GAAGD,QAAQ,CAACE,SAAT,CACnB,UAAAJ,OAAO;AAAA,eAAIA,OAAO,CAACP,EAAR,KAAeK,SAAnB;AAAA,OADY,CAArB;;AAGA,UAAI,CAACK,YAAL,EAAmB;AACjB3B,QAAAA,QAAQ,CAAC;AACPI,UAAAA,IAAI,EAAEb,4BADC;AAEP0B,UAAAA,EAAE,EAAEK,SAFG;AAGPO,UAAAA,KAAK,EAAEF,YAHA;AAIPH,UAAAA,OAAO,EAAPA;AAJO,SAAD,CAAR;AAMD,OAPD,MAOO;AACLxB,QAAAA,QAAQ,CAAC;AAAEI,UAAAA,IAAI,EAAEZ,yBAAR;AAAmCyB,UAAAA,EAAE,EAAEK;AAAvC,SAAD,CAAR;AACD;AACF,KAfD;AAgBD,GAjByC;AAAA,CAAnC;AAmBP,OAAO,IAAMQ,UAAU,GAAG,SAAbA,UAAa,CAAAR,SAAS;AAAA,SAAI,UAACtB,QAAD,EAAWC,QAAX,EAAwB;AAC7D,QAAMuB,OAAO,GAAGvB,QAAQ,GAAGyB,QAAX,CAAoBK,IAApB,CAAyB,UAAAP,OAAO;AAAA,aAAIA,OAAO,CAACP,EAAR,KAAeK,SAAnB;AAAA,KAAhC,CAAhB;AACA,QAAMN,MAAM,GAAGf,QAAQ,GAAG+B,YAAX,CAAwBf,EAAvC;AAEA,QAAMgB,IAAI,GAAGT,OAAO,CAACU,KAAR,CAAcH,IAAd,CAAmB,UAAAE,IAAI;AAAA,aAAIA,IAAI,CAACjB,MAAL,KAAgBA,MAApB;AAAA,KAAvB,CAAb;;AAEA,QAAIiB,IAAJ,EAAU;AACRjC,MAAAA,QAAQ,CAACmB,UAAU,CAACc,IAAI,CAAChB,EAAN,CAAX,CAAR,CAA8BL,IAA9B,CAAmC,YAAM;AACvCZ,QAAAA,QAAQ,CAACyB,iBAAiB,CAACH,SAAD,CAAlB,CAAR;AACD,OAFD;AAGD,KAJD,MAIO;AACLtB,MAAAA,QAAQ,CAACqB,OAAO,CAACC,SAAD,CAAR,CAAR,CAA6BV,IAA7B,CAAkC,YAAM;AACtCZ,QAAAA,QAAQ,CAACyB,iBAAiB,CAACH,SAAD,CAAlB,CAAR;AACD,OAFD;AAGD;AACF,GAfkC;AAAA,CAA5B;AAgBP,OAAO,IAAMa,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,OAAO,EAAI;AAC5C,SAAO;AACLhC,IAAAA,IAAI,EAAEzB,YADD;AAEL0D,IAAAA,OAAO,EAAED;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACtB,MAAD,EAASM,SAAT,EAAoBpB,KAApB;AAAA,SAA8B,UAAAF,QAAQ,EAAI;AACnE,QAAMuC,MAAM,GAAG;AACbjC,MAAAA,MAAM,EAAE,MADK;AAEbC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAE;AAFR,OAFI;AAMbC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBK,QAAAA,MAAM,EAAEA,MADW;AAEnBM,QAAAA,SAAS,EAAEA;AAFQ,OAAf;AANO,KAAf;AAWA,WAAOjB,KAAK,CAAC,wBAAD,EAA2BkC,MAA3B,CAAL,CACJ3B,IADI,CACC,UAAA4B,QAAQ;AAAA,aAAIA,QAAQ,CAAC1B,IAAT,EAAJ;AAAA,KADT,EAEJF,IAFI,CAEC,UAAAwB,OAAO,EAAI;AACfpC,MAAAA,QAAQ,CAACmC,mBAAmB,CAACC,OAAD,CAApB,CAAR;AACA,aAAOA,OAAO,CAACH,IAAR,CAAahB,EAApB;AACD,KALI,CAAP;AAMD,GAlB0B;AAAA,CAApB;AAoBP,OAAO,IAAMwB,OAAO,GAAG,SAAVA,OAAU;AAAA,MAAGjB,OAAH,QAAGA,OAAH;AAAA,MAAYtB,KAAZ,QAAYA,KAAZ;AAAA,SAAwB,UAAAF,QAAQ,EAAI;AACzDK,IAAAA,KAAK,WAAIR,UAAJ,gBAA2B;AAC9BS,MAAAA,MAAM,EAAE,MADsB;AAE9BC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPmC,QAAAA,OAAO,EAAE;AAFF,OAFqB;AAM9B3B,MAAAA,IAAI,EAAE;AAAEhB,QAAAA,IAAI,EAAEyB;AAAR;AANwB,KAA3B,CAAL,CAQGZ,IARH,CAQQ,YAAM;AACVZ,MAAAA,QAAQ,CAAC2C,WAAW,EAAZ,CAAR;AACD,KAVH,EAWGC,KAXH,CAWS,UAAAC,GAAG;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,KAXZ;AAYD,GAbsB;AAAA,CAAhB;AAeP,OAAO,SAASF,WAAT,GAAuB;AAC5B,SAAO,UAAS3C,QAAT,EAAmB;AACxBA,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAExB;AAAR,KAAD,CAAR;AACAyB,IAAAA,KAAK,WAAIR,UAAJ,eAAL,CACGe,IADH,CACQ,UAAAC,GAAG,EAAI;AACX,UAAIA,GAAG,CAACmC,UAAJ,KAAmB,IAAvB,EAA6B;AAC3B,eAAOnC,GAAG,CAACC,IAAJ,EAAP;AACD;AACF,KALH,EAMGF,IANH,CAMQ,UAAAG,IAAI,EAAI;AACZf,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEvB,oBADC;AAEPwD,QAAAA,OAAO,EAAE;AACPX,UAAAA,QAAQ,EAAEX,IAAI,CAACW;AADR;AAFF,OAAD,CAAR;AAMD,KAbH,EAcGkB,KAdH,CAcS,UAAAC,GAAG,EAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA7C,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEtB;AAAR,OAAD,CAAR;AACD,KAjBH;AAkBD,GApBD;AAqBD;AAED,OAAO,IAAMmE,KAAK,GAAG,SAARA,KAAQ,CAAAC,SAAS;AAAA,SAAI,UAAAlD,QAAQ,EAAI;AAC5CA,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAE/B;AAAR,KAAD,CAAR;AACAgC,IAAAA,KAAK,WAAIR,UAAJ,kBAA6B;AAChCS,MAAAA,MAAM,EAAE,MADwB;AAEhCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFuB;AAKhCE,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeuC,SAAf;AAL0B,KAA7B,CAAL,CAOGtC,IAPH,CAOQ,UAAA4B,QAAQ,EAAI;AAChB,UAAI,CAACA,QAAQ,CAACW,EAAd,EAAkB;AAChBX,QAAAA,QAAQ,CAAC1B,IAAT,GAAgBF,IAAhB,CAAqB,UAAAiC,GAAG,EAAI;AAC1B,gBAAMA,GAAN;AACD,SAFD;AAGD;;AACD,aAAOL,QAAQ,CAAC1B,IAAT,EAAP;AACD,KAdH,EAeGF,IAfH,CAeQ,UAAAG,IAAI,EAAI;AAEZ,UAAIA,IAAI,CAACqC,OAAL,KAAiB,KAArB,EAA4B;AAC1B,cAAM,EAAN;AACD;;AACDpD,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAE7B,aADC;AAEP8D,QAAAA,OAAO,EAAE;AACPnC,UAAAA,KAAK,EAAEa,IAAI,CAACb,KADL;AAEPe,UAAAA,EAAE,EAAEF,IAAI,CAACE;AAFF,SAFF;AAMPgC,QAAAA,KAAK,EAAElC,IANA;AAOPsC,QAAAA,MAAM,EAAE;AAPD,OAAD,CAAR;AASArD,MAAAA,QAAQ,CAACrC,IAAI,CAAC,UAAD,CAAL,CAAR;AACAqC,MAAAA,QAAQ,CAACkB,WAAW,CAACH,IAAI,CAACE,EAAN,CAAZ,CAAR;AACD,KA/BH,EAgCG2B,KAhCH,CAgCS,UAAAC,GAAG,EAAI;AACZ7C,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAE9B,aADC;AAEP+E,QAAAA,MAAM,EACJ;AAHK,OAAD,CAAR;AAKD,KAtCH;AAuCD,GAzC6B;AAAA,CAAvB;AA2CP,OAAO,IAAMnC,WAAW,GAAG,SAAdA,WAAc,CAAAF,MAAM;AAAA,SAAI,UAAAhB,QAAQ,EAAI;AAC/CA,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAErC;AAAR,KAAD,CAAR;AACAsC,IAAAA,KAAK,WAAIR,UAAJ,oBAAwBmB,MAAxB,EAAL,CACGJ,IADH,CACQ,UAAA4B,QAAQ,EAAI;AAChB,UAAI,CAACA,QAAQ,CAACW,EAAd,EAAkB;AAChBX,QAAAA,QAAQ,CAAC1B,IAAT,GAAgBF,IAAhB,CAAqB,UAAAiC,GAAG,EAAI;AAC1B,gBAAMA,GAAN;AACD,SAFD;AAGD;;AACD,aAAOL,QAAQ,CAAC1B,IAAT,EAAP;AACD,KARH,EASGF,IATH,CASQ,UAAAG,IAAI,EAAI;AACZf,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEpC,gBAAR;AAA0B+C,QAAAA,IAAI,EAAEA,IAAI,CAACuC;AAArC,OAAD,CAAR;AACD,KAXH,EAYGV,KAZH,CAYS,UAAAC,GAAG,EAAI;AACZ7C,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEnC,gBAAR;AAA0B4E,QAAAA,GAAG,EAAHA;AAA1B,OAAD,CAAR;AACD,KAdH;AAeD,GAjBgC;AAAA,CAA1B;AAmBP,OAAO,IAAMU,MAAM,GAAG,SAATA,MAAS;AAAA,SAAM,UAAAvD,QAAQ,EAAI;AACtCK,IAAAA,KAAK,WAAIR,UAAJ,kBAAL,CACGe,IADH,CACQ,UAAA4B,QAAQ,EAAI;AAChB,UAAI,CAACA,QAAQ,CAACW,EAAd,EAAkB;AAChBX,QAAAA,QAAQ,CAAC1B,IAAT,GAAgBF,IAAhB,CAAqB,UAAAiC,GAAG,EAAI;AAC1B,gBAAMA,GAAN;AACD,SAFD;AAGD;;AACD,aAAOL,QAAQ,CAAC1B,IAAT,EAAP;AACD,KARH,EASGF,IATH,CASQ,UAAAG,IAAI,EAAI;AACZf,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEjC;AAAR,OAAD,CAAR;AACA6B,MAAAA,QAAQ,CAACrC,IAAI,CAAC,GAAD,CAAL,CAAR;AACA6F,MAAAA,KAAK,CAAC,8CAAD,CAAL;AACD,KAbH,EAcGZ,KAdH,CAcS,UAAAC,GAAG,EAAI;AACZ7C,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEhC,cAAR;AAAwByE,QAAAA,GAAG,EAAHA;AAAxB,OAAD,CAAR;AACD,KAhBH;AAiBD,GAlBqB;AAAA,CAAf;AAmBPY,IAAI;AAEJ,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,YAAD,EAAeC,OAAf;AAAA,SAA2B,UAAA5D,QAAQ,EAAI;AAE7DA,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAE5B;AADC,KAAD,CAAR;AAIA6B,IAAAA,KAAK,WAAIR,UAAJ,qBAAgC;AACnCS,MAAAA,MAAM,EAAE,MAD2B;AAEnCC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF0B;AAKnCE,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAEJgD,YAFI;AAL6B,KAAhC,CAAL,CAUE;AACA;AAXF,KAYG/C,IAZH,CAYQ,UAAA4B,QAAQ,EAAI;AAEhB,UAAI,CAACA,QAAQ,CAACW,EAAd,EAAkB;AAChB;AACAX,QAAAA,QAAQ,CAAC1B,IAAT,GAAgBF,IAAhB,CAAqB,UAAAiC,GAAG,EAAI;AAC1B,gBAAMA,GAAN;AACD,SAFD;AAGD;;AACD,aAAOL,QAAQ,CAAC1B,IAAT,EAAP,CARgB,CAQQ;AACzB,KArBH,EAsBGF,IAtBH,CAsBQ,UAAAG,IAAI,EAAI;AAEZf,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAE1B,gBADC;AAEPgF,QAAAA,QAAQ,EAAE3C,IAFH;AAGPsC,QAAAA,MAAM,EAAE,0BAHD,CAG4B;;AAH5B,OAAD,CAAR;AAKArD,MAAAA,QAAQ,CAACrC,IAAI,CAAC,UAAD,CAAL,CAAR;AACAqC,MAAAA,QAAQ,CACNiD,KAAK,CAAC;AACJY,QAAAA,QAAQ,EAAEF,YAAY,CAACE,QADnB;AAEJC,QAAAA,QAAQ,EAAEH,YAAY,CAACG;AAFnB,OAAD,CADC,CAAR,CARY,CAaT;AACJ,KApCH,EAqCGlB,KArCH,CAqCS,UAAAC,GAAG,EAAI;AACZ;AACA7C,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAE3B,gBADC;AAEP4E,QAAAA,MAAM;AAFC,OAAD,CAAR;AAID,KA3CH;AA4CD,GAlDuB;AAAA,CAAjB;AAoDP,OAAO,IAAMU,UAAU,GAAG,SAAbA,UAAa,CAAA7D,KAAK;AAAA,SAAI,UAAAF,QAAQ,EAAI;AAC7CA,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAExC;AAAR,KAAD,CAAR;AACAyC,IAAAA,KAAK,WAAIR,UAAJ,aAAwB;AAC3BS,MAAAA,MAAM,EAAE,QADmB;AAE3BC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,mBAAYN,KAAZ;AADN;AAFkB,KAAxB,CAAL,CAMGU,IANH,CAMQ,UAAA4B,QAAQ,EAAI;AAChB,UAAI,CAACA,QAAQ,CAACW,EAAd,EAAkB;AAChBX,QAAAA,QAAQ,CAAC1B,IAAT,GAAgBF,IAAhB,CAAqB,UAAAiC,GAAG,EAAI;AAC1B,gBAAMA,GAAN;AACD,SAFD;AAGD;;AACD,aAAOL,QAAQ,CAAC1B,IAAT,EAAP;AACD,KAbH,EAcGF,IAdH,CAcQ,UAAAG,IAAI,EAAI;AACZ+B,MAAAA,OAAO,CAACC,GAAR,CAAYhC,IAAZ;AACAf,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEvC;AAAR,OAAD,CAAR;AACAmC,MAAAA,QAAQ,CAACrC,IAAI,CAAC,WAAD,CAAL,CAAR,CAHY,CAIZ;AACD,KAnBH,EAoBGiF,KApBH,CAoBS,UAAAC,GAAG,EAAI;AACZ7C,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEtC,mBAAR;AAA6B+E,QAAAA,GAAG,EAAHA;AAA7B,OAAD,CAAR;AACD,KAtBH;AAuBD,GAzB8B;AAAA,CAAxB;AA0BP,OAAO,IAAMmB,UAAU,GAAG,SAAbA,UAAa,CAAAC,QAAQ;AAAA,SAAI,UAACjE,QAAD,EAAWC,QAAX,EAAwB;AAC5D,QAAMC,KAAK,GAAGD,QAAQ,GAAGE,cAAX,CAA0BD,KAAxC;;AACA,QAAI+D,QAAQ,CAACC,WAAT,KAAyB,EAA7B,EAAiC;AAC/B,aAAOD,QAAQ,CAACC,WAAhB;AACD;;AACD,QAAID,QAAQ,CAACH,QAAT,KAAsB,EAA1B,EAA8B;AAC5B,aAAOG,QAAQ,CAACH,QAAhB;AACD;;AACD9D,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAEpB;AAAR,KAAD,CAAR;AACAqB,IAAAA,KAAK,CAAC,yCAAD,EAA4C;AAC/CC,MAAAA,MAAM,EAAE,OADuC;AAE/CC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,mBAAYN,KAAZ,CADN;AAEP,wBAAgB;AAFT,OAFsC;AAM/CO,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAesD,QAAf;AANyC,KAA5C,CAAL,CAQGrD,IARH,CAQQ,UAAA4B,QAAQ,EAAI;AAChB,UAAI,CAACA,QAAQ,CAACW,EAAd,EAAkB;AAChBX,QAAAA,QAAQ,CAAC1B,IAAT,GAAgBF,IAAhB,CAAqB,UAAAiC,GAAG,EAAI;AAC1B,gBAAMA,GAAN;AACD,SAFD;AAGD;;AACD,aAAOL,QAAQ,CAAC1B,IAAT,EAAP;AACD,KAfH,EAgBGF,IAhBH,CAgBQ,UAAAG,IAAI,EAAI;AACZf,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEnB,mBAAR;AAA6B8B,QAAAA,IAAI,EAAEA,IAAI,CAACuC;AAAxC,OAAD,CAAR;AACAtD,MAAAA,QAAQ,CAACrC,IAAI,CAAC,UAAD,CAAL,CAAR;AACD,KAnBH,EAoBGiF,KApBH,CAoBS,UAAAC,GAAG,EAAI;AACZ7C,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAElB,mBAAR;AAA6B2D,QAAAA,GAAG,EAAHA;AAA7B,OAAD,CAAR;AACD,KAtBH;AAuBD,GAhCiC;AAAA,CAA3B","sourcesContent":["import { push } from \"connected-react-router\";\nexport const DELETE_USER = \"DELETE_USER\";\nexport const DELETE_USER_SUCCESS = \"DELETE_USER_SUCCESS\";\nexport const DELETE_USER_FAILURE = \"DELETE_USER_FAILURE\";\nexport const GET_USER = \"GET_USER\";\nexport const GET_USER_SUCCESS = \"GET_USER_SUCCESS\";\nexport const GET_USER_FAILURE = \"GET_USER_FAILURE\";\nexport const LOGOUT = \"LOGOUT\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const LOGOUT_FAILURE = \"LOGOUT_FAILURE\";\nexport const LOGIN = \"LOGIN\";\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const REGISTER = \"REGISTER\";\nexport const REGISTER_FAILURE = \"REGISTER_FAILURE\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const LIKE_MESSAGE = \"LIKE_MESSAGE\";\nexport const GET_MESSAGES = \"GET_MESSAGES\";\nexport const GET_MESSAGES_SUCCESS = \"GET_MESSAGES_SUCCESS\";\nexport const GET_MESSAGES_FAILURE = \"GET_MESSAGES_FAILURE\";\nexport const ADD_MESS = \"ADD_TEXT\";\nexport const UPDATE_USER = \"UPDATE_USER\";\nexport const UPDATE_USER_SUCCESS = \"UPDATE_USER_SUCCESS\";\nexport const UPDATE_USER_FAILURE = \"UPDATE_USER_FAILURE\";\nexport const REMOVE_LIKE = \"REMOVE_LIKE\";\nexport const REMOVE_LIKE_SUCCESS = \"REMOVE_LIKE_SUCCESS\";\nexport const ADD_LIKE = \"ADD_LIKE\";\nexport const ADD_LIKE_SUCCESS = \"ADD_LIKE_SUCCESS\";\nexport const UPDATE_MESSAGE_BY_ID_SUCCESS = \"UPDATE_MESSAGE_BY_ID_SUCCESS\";\nexport const UPDATE_MESSAGE_BY_ID_FAIL = \"UPDATE_MESSAGE_BY_ID_FAIL\";\nexport const GET_MESSAGE_BY_ID = \"GET_MESSAGE_BY_ID\";\nexport const GET_MESSAGE_BY_ID_SUCCESS = \"GET_MESSAGE_BY_ID_SUCCESS\";\nexport const CREATE_MESSAGE = \"CREATE_MESSAGE\";\nexport const CREATE_MESSAGE_SUCCESS = \"CREATE_MESSAGE_SUCCESS\";\nconst kwitterURL = \"https://kwitter-api.herokuapp.com\";\n\nexport const composeMessage = text => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  dispatch({ type: CREATE_MESSAGE });\n  return fetch(`${kwitterURL}/messages`, {\n    method: \"POST\",\n    headers: {\n      Authorization: \"Bearer \" + token,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({ text })\n  })\n    .then(res => res.json())\n    .then(data => {\n      dispatch({\n        type: CREATE_MESSAGE_SUCCESS\n      });\n      const userId = getState().authentication.id;\n      dispatch(getUserInfo(userId));\n    });\n};\n\nexport const removeLike = likeId => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  dispatch({ type: REMOVE_LIKE });\n  return fetch(`${kwitterURL}/likes/${likeId}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: \"Bearer \" + token\n    }\n  })\n    .then(res => res.json())\n    .then(data => {\n      dispatch({\n        type: REMOVE_LIKE_SUCCESS\n      });\n    });\n};\n\nexport const addLike = messageId => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  dispatch({ type: ADD_LIKE });\n  return fetch(`${kwitterURL}/likes`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token\n    },\n    body: JSON.stringify({ messageId })\n  })\n    .then(res => res.json())\n    .then(data => {\n      dispatch({ type: ADD_LIKE_SUCCESS });\n    });\n};\nexport const getMessageById = messageId => dispatch => {\n  dispatch({ type: GET_MESSAGE_BY_ID });\n  return fetch(`${kwitterURL}/messages/${messageId}`)\n    .then(res => res.json())\n    .then(data => {\n      dispatch({ type: GET_MESSAGE_BY_ID_SUCCESS });\n      return data.message;\n    });\n};\nexport const updateMessageById = messageId => (dispatch, getState) => {\n  dispatch(getMessageById(messageId)).then(message => {\n    const messages = getState().messages;\n    const messageIndex = messages.findIndex(\n      message => message.id === messageId\n    );\n    if (~messageIndex) {\n      dispatch({\n        type: UPDATE_MESSAGE_BY_ID_SUCCESS,\n        id: messageId,\n        index: messageIndex,\n        message\n      });\n    } else {\n      dispatch({ type: UPDATE_MESSAGE_BY_ID_FAIL, id: messageId });\n    }\n  });\n};\n\nexport const toggleLike = messageId => (dispatch, getState) => {\n  const message = getState().messages.find(message => message.id === messageId);\n  const userId = getState().loggedInUser.id;\n\n  const like = message.likes.find(like => like.userId === userId);\n\n  if (like) {\n    dispatch(removeLike(like.id)).then(() => {\n      dispatch(updateMessageById(messageId));\n    });\n  } else {\n    dispatch(addLike(messageId)).then(() => {\n      dispatch(updateMessageById(messageId));\n    });\n  }\n};\nexport const likedMessageSuccess = likeObj => {\n  return {\n    type: LIKE_MESSAGE,\n    payload: likeObj\n  };\n};\n\nexport const likeMessage = (userId, messageId, token) => dispatch => {\n  const header = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer ${token}\"\n    },\n    body: JSON.stringify({\n      userId: userId,\n      messageId: messageId\n    })\n  };\n  return fetch(\"${kwitterURL}/messages\", header)\n    .then(response => response.json())\n    .then(likeObj => {\n      dispatch(likedMessageSuccess(likeObj));\n      return likeObj.like.id;\n    });\n};\n\nexport const addMess = ({ message, token }) => dispatch => {\n  fetch(`${kwitterURL}/messages`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      charset: \"utf-8\"\n    },\n    data: { text: message }\n  })\n    .then(() => {\n      dispatch(getMessages());\n    })\n    .catch(err => console.log(err));\n};\n\nexport function getMessages() {\n  return function(dispatch) {\n    dispatch({ type: GET_MESSAGES });\n    fetch(`${kwitterURL}/messages`)\n      .then(res => {\n        if (res.statusText === \"OK\") {\n          return res.json(); \n        }\n      })\n      .then(data => {\n        dispatch({\n          type: GET_MESSAGES_SUCCESS,\n          payload: {\n            messages: data.messages\n          }\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        dispatch({ type: GET_MESSAGES_FAILURE });\n      });\n  };\n}\n\nexport const login = loginData => dispatch => {\n  dispatch({ type: LOGIN });\n  fetch(`${kwitterURL}/auth/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(loginData)\n  })\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      \n      if (data.success === false) {\n        throw \"\";\n      }\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: {\n          token: data.token,\n          id: data.id\n        },\n        login: data,\n        result: \"Successful login!\"\n      });\n      dispatch(push(\"/profile\"));\n      dispatch(getUserInfo(data.id));\n    })\n    .catch(err => {\n      dispatch({\n        type: LOGIN_FAILURE,\n        result:\n          \"Failed to login. Please enter a valid username and/or password.\"\n      });\n    });\n};\n\nexport const getUserInfo = userId => dispatch => {\n  dispatch({ type: GET_USER });\n  fetch(`${kwitterURL}/users/${userId}`)\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      dispatch({ type: GET_USER_SUCCESS, data: data.user });\n    })\n    .catch(err => {\n      dispatch({ type: GET_USER_FAILURE, err });\n    });\n};\n\nexport const logout = () => dispatch => {\n  fetch(`${kwitterURL}/auth/logout`)\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      dispatch({ type: LOGOUT_SUCCESS });\n      dispatch(push(\"/\"));\n      alert(\"Thanks for visiting KWITTER! Come back soon!\");\n    })\n    .catch(err => {\n      dispatch({ type: LOGOUT_FAILURE, err });\n    });\n};\njust\n\nexport const register = (registerData, history) => dispatch => {\n\n  dispatch({\n    type: REGISTER\n  });\n \n  fetch(`${kwitterURL}/auth/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(\n     \n      registerData\n    )\n  })\n    // hydrates body; always need for api b/c always returns json; if not, it would  be parsed diff\n    // .then(response => response.json()) // if immediately hydrate, it always assumes its correct, so ave to check\n    .then(response => {\n    \n      if (!response.ok) {\n        // throw from here, it goes to catch\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json(); // this is an else basically\n    })\n    .then(data => {\n   \n      dispatch({\n        type: REGISTER_SUCCESS,\n        register: data,\n        result: \"Successfully Registered!\" // could make a <div>{this.props.result}</div> to display; reducer might use this value to put some  update\n      });\n      dispatch(push(\"/profile\"));\n      dispatch(\n        login({\n          username: registerData.username,\n          password: registerData.password\n        })\n      ); //gets loginData w. un and p, so need it as an obj; haveing only the username and password is because thats what the rD needs\n    })\n    .catch(err => {\n      // dispatch here on fail\n      dispatch({\n        type: REGISTER_FAILURE,\n        result: `Failed to register. Please enter a unique username, and make sure all fields have 3-20 characters.`\n      });\n    });\n};\n\nexport const deleteUser = token => dispatch => {\n  dispatch({ type: DELETE_USER });\n  fetch(`${kwitterURL}/users`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  })\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      console.log(data);\n      dispatch({ type: DELETE_USER_SUCCESS });\n      dispatch(push(\"/register\"));\n      //   window.confirm(\"Are you sure?\");\n    })\n    .catch(err => {\n      dispatch({ type: DELETE_USER_FAILURE, err });\n    });\n};\nexport const updateUser = userData => (dispatch, getState) => {\n  const token = getState().authentication.token;\n  if (userData.displayName === \"\") {\n    delete userData.displayName;\n  }\n  if (userData.password === \"\") {\n    delete userData.password;\n  }\n  dispatch({ type: UPDATE_USER });\n  fetch(\"https://kwitter-api.herokuapp.com/users\", {\n    method: \"PATCH\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(userData)\n  })\n    .then(response => {\n      if (!response.ok) {\n        response.json().then(err => {\n          throw err;\n        });\n      }\n      return response.json();\n    })\n    .then(data => {\n      dispatch({ type: UPDATE_USER_SUCCESS, data: data.user });\n      dispatch(push(\"/profile\"));\n    })\n    .catch(err => {\n      dispatch({ type: UPDATE_USER_FAILURE, err });\n    });\n};"]},"metadata":{},"sourceType":"module"}
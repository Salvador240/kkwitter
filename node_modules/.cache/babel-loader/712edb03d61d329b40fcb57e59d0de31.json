{"ast":null,"code":"import _objectSpread from \"/Users/Sdeg/Desktop/workspace/kwitters/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/Sdeg/Desktop/workspace/kwitters/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Sdeg/Desktop/workspace/kwitters/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Sdeg/Desktop/workspace/kwitters/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Sdeg/Desktop/workspace/kwitters/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Sdeg/Desktop/workspace/kwitters/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Sdeg/Desktop/workspace/kwitters/src/components/MessagesList.js\";\nimport React, { Component } from \"react\";\nimport { getMessages as _getMessages, toggleLike as _toggleLike } from \"../Actions/actions\";\nimport { connect } from \"react-redux\";\nimport Message from \"./Message\";\nimport { Grid } from \"semantic-ui-react\";\nexport var MessagesList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MessagesList, _Component);\n\n  function MessagesList() {\n    _classCallCheck(this, MessagesList);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MessagesList).apply(this, arguments));\n  }\n\n  _createClass(MessagesList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getMessages();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        stackable: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, this.props.messages.map(function (message) {\n        return React.createElement(Message, {\n          key: message.id,\n          text: message.text,\n          username: message.username,\n          toggleLike: function toggleLike() {\n            return _this.props.toggleLike(message.id);\n          },\n          numOfLikes: message.likes.length,\n          isLiked: message.isLiked,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        });\n      })))));\n    }\n  }]);\n\n  return MessagesList;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    messages: state.messages.map(function (message) {\n      var username = state.users[message.userId] && state.users[message.userId].username || \"unknown\";\n      var like = message.likes.find(function (like) {\n        return like.userId === state.authentication.id;\n      });\n\n      if (like) {\n        return _objectSpread({}, message, {\n          username: username,\n          isLiked: true\n        });\n      } else {\n        return _objectSpread({}, message, {\n          username: username,\n          isLiked: false\n        });\n      }\n    })\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    getMessages: function getMessages() {\n      dispatch(_getMessages());\n    },\n    toggleLike: function toggleLike(messageId) {\n      return dispatch(_toggleLike(messageId));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessagesList);","map":{"version":3,"sources":["/Users/Sdeg/Desktop/workspace/kwitters/src/components/MessagesList.js"],"names":["React","Component","getMessages","toggleLike","connect","Message","Grid","MessagesList","props","messages","map","message","id","text","username","likes","length","isLiked","mapStateToProps","state","users","userId","like","find","authentication","mapDispatchToProps","dispatch","messageId"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { getMessages, toggleLike } from \"../Actions/actions\";\nimport { connect } from \"react-redux\";\nimport Message from \"./Message\";\nimport { Grid } from \"semantic-ui-react\";\n\nexport class MessagesList extends Component {\n  componentDidMount() {\n    this.props.getMessages();\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Grid container stackable>\n          <Grid.Row>\n            <Grid.Column>\n              {this.props.messages.map(message => (\n                <Message\n                  key={message.id}\n                  text={message.text}\n                  username={message.username}\n                  toggleLike={() => this.props.toggleLike(message.id)}\n                  numOfLikes={message.likes.length}\n                  isLiked={message.isLiked}\n                />\n              ))}\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    messages: state.messages.map(message => {\n      const username =\n        (state.users[message.userId] && state.users[message.userId].username) ||\n        \"unknown\";\n      const like = message.likes.find(\n        like => like.userId === state.authentication.id\n      );\n      if (like) {\n        return {\n          ...message,\n          username,\n          isLiked: true\n        };\n      } else {\n        return {\n          ...message,\n          username,\n          isLiked: false\n        };\n      }\n    })\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getMessages: () => {\n      dispatch(getMessages());\n    },\n    toggleLike: messageId => dispatch(toggleLike(messageId))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MessagesList);\n\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/Users/Sdeg/Desktop/workspace/assessment---kwitter-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { GET_USER, GET_USER_SUCCESS, GET_USER_FAIL, GET_USERS, UPLOAD_USER_IMAGE, UPLOAD_USER_IMAGE_SUCCESS, UPLOAD_USER_IMAGE_FAIL, DOWNLOAD_USER_IMAGE, DOWNLOAD_USER_IMAGE_SUCCESS, DOWNLOAD_USER_IMAGE_FAIL } from \"../actions\";\nvar initialState = {\n  userData: {},\n  userImage: null,\n  userImageTimestamp: 0\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_USER:\n      return _objectSpread({}, state);\n\n    case GET_USER_SUCCESS:\n      return _objectSpread({}, state, {\n        userData: action.payload.user\n      });\n\n    case GET_USER_FAIL:\n      return _objectSpread({}, state);\n\n    case GET_USERS:\n      return _objectSpread({}, state, {\n        users: action.payload\n      });\n\n    case UPLOAD_USER_IMAGE:\n      return _objectSpread({}, state);\n\n    case UPLOAD_USER_IMAGE_SUCCESS:\n      return _objectSpread({}, state, {\n        userImageTimestamp: action.userImageTimestamp\n      });\n\n    case UPLOAD_USER_IMAGE_FAIL:\n      return _objectSpread({}, state);\n\n    case DOWNLOAD_USER_IMAGE:\n      return _objectSpread({}, state);\n\n    case DOWNLOAD_USER_IMAGE_SUCCESS:\n      return _objectSpread({}, state, {\n        userImage: action.userImage\n      });\n\n    case DOWNLOAD_USER_IMAGE_FAIL:\n      return _objectSpread({}, state);\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/Sdeg/Desktop/workspace/assessment---kwitter-frontend/src/reducers/users.js"],"names":["GET_USER","GET_USER_SUCCESS","GET_USER_FAIL","GET_USERS","UPLOAD_USER_IMAGE","UPLOAD_USER_IMAGE_SUCCESS","UPLOAD_USER_IMAGE_FAIL","DOWNLOAD_USER_IMAGE","DOWNLOAD_USER_IMAGE_SUCCESS","DOWNLOAD_USER_IMAGE_FAIL","initialState","userData","userImage","userImageTimestamp","state","action","type","payload","user","users"],"mappings":";AAAA,SACEA,QADF,EAEEC,gBAFF,EAGEC,aAHF,EAIEC,SAJF,EAKEC,iBALF,EAMEC,yBANF,EAOEC,sBAPF,EAQEC,mBARF,EASEC,2BATF,EAUEC,wBAVF,QAWO,YAXP;AAaA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,SAAS,EAAE,IAFQ;AAGnBC,EAAAA,kBAAkB,EAAE;AAHD,CAArB;AAMA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKhB,QAAL;AACE,+BAAYc,KAAZ;;AAEF,SAAKb,gBAAL;AACE,+BACKa,KADL;AAEEH,QAAAA,QAAQ,EAAEI,MAAM,CAACE,OAAP,CAAeC;AAF3B;;AAKF,SAAKhB,aAAL;AACE,+BAAYY,KAAZ;;AAEF,SAAKX,SAAL;AACE,+BAAYW,KAAZ;AAAmBK,QAAAA,KAAK,EAAEJ,MAAM,CAACE;AAAjC;;AAEF,SAAKb,iBAAL;AACE,+BAAYU,KAAZ;;AAEF,SAAKT,yBAAL;AACE,+BAAYS,KAAZ;AAAmBD,QAAAA,kBAAkB,EAAEE,MAAM,CAACF;AAA9C;;AAEF,SAAKP,sBAAL;AACE,+BAAYQ,KAAZ;;AAEF,SAAKP,mBAAL;AACE,+BAAYO,KAAZ;;AAEF,SAAKN,2BAAL;AACE,+BAAYM,KAAZ;AAAmBF,QAAAA,SAAS,EAAEG,MAAM,CAACH;AAArC;;AAEF,SAAKH,wBAAL;AACE,+BAAYK,KAAZ;;AAEF;AACE,aAAOA,KAAP;AAnCJ;AAqCD,CAtCD","sourcesContent":["import {\n  GET_USER,\n  GET_USER_SUCCESS,\n  GET_USER_FAIL,\n  GET_USERS,\n  UPLOAD_USER_IMAGE,\n  UPLOAD_USER_IMAGE_SUCCESS,\n  UPLOAD_USER_IMAGE_FAIL,\n  DOWNLOAD_USER_IMAGE,\n  DOWNLOAD_USER_IMAGE_SUCCESS,\n  DOWNLOAD_USER_IMAGE_FAIL\n} from \"../actions\";\n\nconst initialState = {\n  userData: {},\n  userImage: null,\n  userImageTimestamp: 0\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case GET_USER:\n      return { ...state };\n\n    case GET_USER_SUCCESS:\n      return {\n        ...state,\n        userData: action.payload.user\n      };\n\n    case GET_USER_FAIL:\n      return { ...state };\n\n    case GET_USERS:\n      return { ...state, users: action.payload };\n\n    case UPLOAD_USER_IMAGE:\n      return { ...state };\n\n    case UPLOAD_USER_IMAGE_SUCCESS:\n      return { ...state, userImageTimestamp: action.userImageTimestamp };\n\n    case UPLOAD_USER_IMAGE_FAIL:\n      return { ...state };\n\n    case DOWNLOAD_USER_IMAGE:\n      return { ...state };\n\n    case DOWNLOAD_USER_IMAGE_SUCCESS:\n      return { ...state, userImage: action.userImage };\n\n    case DOWNLOAD_USER_IMAGE_FAIL:\n      return { ...state };\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}